{"ast":null,"code":"import { takeLatest, call, put, throttle, takeEvery } from \"redux-saga/effects\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, MAIN_LOAD_POSTS_REQUEST, MAIN_LOAD_POSTS_SUCCESS, MAIN_LOAD_POSTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, WRITE_POST_REQUEST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE, POST_SCRAP_REQUEST, POST_SCRAP_SUCCESS, POST_SCRAP_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_FORUM_POSTS_REQUEST, LOAD_FORUM_POSTS_SUCCESS, LOAD_FORUM_POSTS_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LIKE_COMMENT_REQUEST, LIKE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, UNLIKE_COMMENT_REQUEST, UNLIKE_COMMENT_SUCCESS, UNLIKE_COMMENT_FAILURE, POST_UNSCRAP_SUCCESS, POST_UNSCRAP_FAILURE, POST_UNSCRAP_REQUEST } from \"../reducers/post\";\nimport { mainLoadPosts, writePost, loadPost, loadPosts, loadForumPosts, addComment, deletePost, deleteComment, deleteCommentWithChildren, upLike, unLike, postScrap, postUnScrap } from \"../lib/api/post\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포스트 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n// saga\n\nfunction* loadPostSaga(action) {\n  try {\n    const {\n      postId\n    } = action.payload;\n    const res = yield call(loadPost, postId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      post: res.data.post\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* loadPostsSaga(action) {\n  try {\n    const res = yield call(loadPosts, action.payload);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      contentType: action.payload.type,\n      data: res.data.posts,\n      temporalPostsLength: res.data.postSize\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      contentType: action.payload\n    });\n  }\n}\n\nfunction* mainLoadPostsSaga(action) {\n  try {\n    const res = yield call(mainLoadPosts);\n    const {\n      study,\n      project,\n      forum\n    } = res.data.posts;\n    yield put({\n      type: MAIN_LOAD_POSTS_SUCCESS,\n      study,\n      project,\n      forum\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: MAIN_LOAD_POSTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* writePostSaga(action) {\n  try {\n    const res = yield call(writePost, action.payload);\n    yield put({\n      type: WRITE_POST_SUCCESS\n    });\n    const post = res.data.post;\n    window.location.href = `http://localhost:3000/articles/${post.type}/${post._id}`;\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: WRITE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* postScrapSaga(action) {\n  try {\n    const res = yield call(postScrap, action.payload);\n    yield put({\n      type: POST_SCRAP_SUCCESS,\n      scrap: res.data.scrap\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_SCRAP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* postUnScrapSaga(action) {\n  try {\n    yield call(postUnScrap, action.payload);\n    yield put({\n      type: POST_UNSCRAP_SUCCESS,\n      scrapId: action.payload.id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_UNSCRAP_FAILURE,\n      error: error.response.data\n    });\n  }\n} // -> deprecated\n\n\nfunction* addCommentSaga(action) {\n  try {\n    const res = yield call(addComment, action.payload);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE\n    });\n  }\n}\n\nfunction* loadForumPostsSaga(action) {\n  try {\n    const res = yield call(loadForumPosts, action.payload);\n    yield put({\n      type: LOAD_FORUM_POSTS_SUCCESS,\n      forumPosts: res.data.posts,\n      temporalPostsLength: res.data.postSize\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_FORUM_POSTS_FAILURE,\n      error: error.response\n    });\n  }\n}\n\nfunction* deletePostSaga(action) {\n  try {\n    yield call(deletePost, action.payload);\n    yield put({\n      type: DELETE_POST_SUCCESS\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: DELETE_POST_FAILURE\n    });\n  }\n} // -> deprecated\n\n\nfunction* deleteCommentSaga(action) {\n  try {\n    if (action.payload.type === \"children\") {\n      yield call(deleteCommentWithChildren, action.payload.id);\n    } else {\n      yield call(deleteComment, action.payload.id);\n    }\n\n    yield put({\n      type: DELETE_COMMENT_SUCCESS\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: DELETE_COMMENT_FAILURE\n    });\n  }\n}\n\nfunction* upLikePostSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      user: action.payload.user,\n      postId: action.payload.id,\n      like: res.data.like\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LIKE_POST_FAILURE\n    });\n  }\n}\n\nfunction* unLikePostSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      postId: action.payload.id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: UNLIKE_POST_FAILURE\n    });\n  }\n}\n\nfunction* upLikeCommentSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      commentId: action.payload.id,\n      like: res.data.like\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LIKE_COMMENT_FAILURE\n    });\n  }\n}\n\nfunction* unLikeCommentSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      commentId: action.payload.commentId\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: UNLIKE_COMMENT_FAILURE\n    });\n  }\n} // watcher\n\n\nexport function* watchPost() {\n  yield takeLatest(MAIN_LOAD_POSTS_REQUEST, mainLoadPostsSaga);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPostsSaga);\n  yield takeLatest(LOAD_POST_REQUEST, loadPostSaga);\n  yield throttle(2000, WRITE_POST_REQUEST, writePostSaga);\n  yield takeLatest(POST_SCRAP_REQUEST, postScrapSaga);\n  yield takeLatest(POST_UNSCRAP_REQUEST, postUnScrapSaga);\n  yield throttle(2000, ADD_COMMENT_REQUEST, addCommentSaga);\n  yield takeLatest(LOAD_FORUM_POSTS_REQUEST, loadForumPostsSaga);\n  yield takeLatest(DELETE_POST_REQUEST, deletePostSaga);\n  yield takeEvery(DELETE_COMMENT_REQUEST, deleteCommentSaga);\n  yield takeLatest(LIKE_POST_REQUEST, upLikePostSaga);\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePostSaga);\n  yield takeLatest(LIKE_COMMENT_REQUEST, upLikeCommentSaga);\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unLikeCommentSaga);\n}","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/sagas/post.js"],"names":["takeLatest","call","put","throttle","takeEvery","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","MAIN_LOAD_POSTS_REQUEST","MAIN_LOAD_POSTS_SUCCESS","MAIN_LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","WRITE_POST_REQUEST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","POST_SCRAP_REQUEST","POST_SCRAP_SUCCESS","POST_SCRAP_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_FORUM_POSTS_REQUEST","LOAD_FORUM_POSTS_SUCCESS","LOAD_FORUM_POSTS_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LIKE_COMMENT_REQUEST","LIKE_COMMENT_SUCCESS","LIKE_COMMENT_FAILURE","UNLIKE_COMMENT_REQUEST","UNLIKE_COMMENT_SUCCESS","UNLIKE_COMMENT_FAILURE","POST_UNSCRAP_SUCCESS","POST_UNSCRAP_FAILURE","POST_UNSCRAP_REQUEST","mainLoadPosts","writePost","loadPost","loadPosts","loadForumPosts","addComment","deletePost","deleteComment","deleteCommentWithChildren","upLike","unLike","postScrap","postUnScrap","loadPostSaga","action","postId","payload","res","type","post","data","error","console","log","response","loadPostsSaga","contentType","posts","temporalPostsLength","postSize","mainLoadPostsSaga","study","project","forum","writePostSaga","window","location","href","_id","postScrapSaga","scrap","postUnScrapSaga","scrapId","id","addCommentSaga","loadForumPostsSaga","forumPosts","deletePostSaga","deleteCommentSaga","upLikePostSaga","user","like","unLikePostSaga","likeId","upLikeCommentSaga","commentId","unLikeCommentSaga","watchPost"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, throttle, takeEvery } from \"redux-saga/effects\";\nimport {\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  MAIN_LOAD_POSTS_REQUEST,\n  MAIN_LOAD_POSTS_SUCCESS,\n  MAIN_LOAD_POSTS_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  WRITE_POST_REQUEST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n  POST_SCRAP_REQUEST,\n  POST_SCRAP_SUCCESS,\n  POST_SCRAP_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  LOAD_FORUM_POSTS_REQUEST,\n  LOAD_FORUM_POSTS_SUCCESS,\n  LOAD_FORUM_POSTS_FAILURE,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  LIKE_COMMENT_REQUEST,\n  LIKE_COMMENT_SUCCESS,\n  LIKE_COMMENT_FAILURE,\n  UNLIKE_COMMENT_REQUEST,\n  UNLIKE_COMMENT_SUCCESS,\n  UNLIKE_COMMENT_FAILURE,\n  POST_UNSCRAP_SUCCESS,\n  POST_UNSCRAP_FAILURE,\n  POST_UNSCRAP_REQUEST,\n} from \"../reducers/post\";\n\nimport {\n  mainLoadPosts,\n  writePost,\n  loadPost,\n  loadPosts,\n  loadForumPosts,\n  addComment,\n  deletePost,\n  deleteComment,\n  deleteCommentWithChildren,\n  upLike,\n  unLike,\n  postScrap,\n  postUnScrap,\n} from \"../lib/api/post\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포스트 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n\n// saga\n\nfunction* loadPostSaga(action) {\n  try {\n    const { postId } = action.payload;\n    const res = yield call(loadPost, postId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      post: res.data.post,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* loadPostsSaga(action) {\n  try {\n    const res = yield call(loadPosts, action.payload);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      contentType: action.payload.type,\n      data: res.data.posts,\n      temporalPostsLength: res.data.postSize,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      contentType: action.payload,\n    });\n  }\n}\n\nfunction* mainLoadPostsSaga(action) {\n  try {\n    const res = yield call(mainLoadPosts);\n    const { study, project, forum } = res.data.posts;\n    yield put({\n      type: MAIN_LOAD_POSTS_SUCCESS,\n      study,\n      project,\n      forum,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: MAIN_LOAD_POSTS_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* writePostSaga(action) {\n  try {\n    const res = yield call(writePost, action.payload);\n    yield put({ type: WRITE_POST_SUCCESS });\n    const post = res.data.post;\n    window.location.href = `http://localhost:3000/articles/${post.type}/${post._id}`;\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: WRITE_POST_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* postScrapSaga(action) {\n  try {\n    const res = yield call(postScrap, action.payload);\n    yield put({ type: POST_SCRAP_SUCCESS, scrap: res.data.scrap });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_SCRAP_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* postUnScrapSaga(action) {\n  try {\n    yield call(postUnScrap, action.payload);\n    yield put({ type: POST_UNSCRAP_SUCCESS, scrapId: action.payload.id });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_UNSCRAP_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\n// -> deprecated\nfunction* addCommentSaga(action) {\n  try {\n    const res = yield call(addComment, action.payload);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n    });\n  }\n}\n\nfunction* loadForumPostsSaga(action) {\n  try {\n    const res = yield call(loadForumPosts, action.payload);\n    yield put({\n      type: LOAD_FORUM_POSTS_SUCCESS,\n      forumPosts: res.data.posts,\n      temporalPostsLength: res.data.postSize,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_FORUM_POSTS_FAILURE,\n      error: error.response,\n    });\n  }\n}\n\nfunction* deletePostSaga(action) {\n  try {\n    yield call(deletePost, action.payload);\n    yield put({ type: DELETE_POST_SUCCESS });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: DELETE_POST_FAILURE });\n  }\n}\n\n// -> deprecated\nfunction* deleteCommentSaga(action) {\n  try {\n    if (action.payload.type === \"children\") {\n      yield call(deleteCommentWithChildren, action.payload.id);\n    } else {\n      yield call(deleteComment, action.payload.id);\n    }\n    yield put({ type: DELETE_COMMENT_SUCCESS });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: DELETE_COMMENT_FAILURE });\n  }\n}\n\nfunction* upLikePostSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      user: action.payload.user,\n      postId: action.payload.id,\n      like: res.data.like,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: LIKE_POST_FAILURE });\n  }\n}\n\nfunction* unLikePostSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      postId: action.payload.id,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: UNLIKE_POST_FAILURE });\n  }\n}\n\nfunction* upLikeCommentSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      commentId: action.payload.id,\n      like: res.data.like,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: LIKE_COMMENT_FAILURE });\n  }\n}\n\nfunction* unLikeCommentSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      commentId: action.payload.commentId,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({ type: UNLIKE_COMMENT_FAILURE });\n  }\n}\n\n// watcher\n\nexport function* watchPost() {\n  yield takeLatest(MAIN_LOAD_POSTS_REQUEST, mainLoadPostsSaga);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPostsSaga);\n  yield takeLatest(LOAD_POST_REQUEST, loadPostSaga);\n  yield throttle(2000, WRITE_POST_REQUEST, writePostSaga);\n  yield takeLatest(POST_SCRAP_REQUEST, postScrapSaga);\n  yield takeLatest(POST_UNSCRAP_REQUEST, postUnScrapSaga);\n  yield throttle(2000, ADD_COMMENT_REQUEST, addCommentSaga);\n  yield takeLatest(LOAD_FORUM_POSTS_REQUEST, loadForumPostsSaga);\n  yield takeLatest(DELETE_POST_REQUEST, deletePostSaga);\n  yield takeEvery(DELETE_COMMENT_REQUEST, deleteCommentSaga);\n  yield takeLatest(LIKE_POST_REQUEST, upLikePostSaga);\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePostSaga);\n  yield takeLatest(LIKE_COMMENT_REQUEST, upLikeCommentSaga);\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unLikeCommentSaga);\n}\n"]},"metadata":{},"sourceType":"module"}