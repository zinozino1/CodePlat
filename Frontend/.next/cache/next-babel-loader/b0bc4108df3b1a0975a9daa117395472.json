{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/pages/mypage.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport { AppstoreOutlined, MailOutlined, UserOutlined } from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar SubMenu = Menu.SubMenu;\nvar MenuWrapper = styled.div.withConfig({\n  displayName: \"mypage__MenuWrapper\",\n  componentId: \"sc-148fna2-0\"\n})([\"display:flex;.menu-bar{flex:1;width:200px;height:90vh;.ant-menu-item{&:hover{color:#111;}}.ant-menu-item-selected{background:#4f528a;color:#fff;&::after{border-right:none;}&:hover{color:#fff;}}.ant-menu-submenu-title{&:hover{color:#111;.ant-menu-submenu-arrow{color:#111;}}}}.menu-content{flex:4;}@media (max-width:768px){flex-direction:column;.menu-bar{height:100%;width:100%;}.menu-content{margin-bottom:3rem;}}\"]);\n_c = MenuWrapper;\n\nvar mypage = /*#__PURE__*/function (_Component) {\n  _inherits(mypage, _Component);\n\n  var _super = _createSuper(mypage);\n\n  function mypage(props, context) {\n    var _this;\n\n    _classCallCheck(this, mypage);\n\n    _this = _super.call(this, props, context);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      chatRooms: [],\n      chatRoomsLoading: false,\n      firstLoad: true,\n      notifications: [],\n      currentMenu: \"profile\",\n      chatRoomKey: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeCurrentMenu\", function (e) {\n      if (e.key === \"profile\" || e.key == \"activity\") {\n        _this.props.dispatch(setCurrentChatRoomAction(null));\n      }\n\n      _this.setState({\n        currentMenu: e.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setChatRoomKey\", function (id) {\n      _this.setState({\n        chatRoomKey: id\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetCurrentChatRoom\", function (chatRoom) {\n      _this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n\n      _this.clearNotifications(chatRoom.id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addChatRoomListener\", function () {\n      var chatRoomsArray = [];\n\n      _this.state.chatRoomsRef.on(\"child_added\", function (DataSnapshot) {\n        var flag = false;\n        DataSnapshot.val().users.forEach(function (v, i) {\n          if (v.nickname === _this.props.me.nickname) {\n            flag = true;\n          }\n        });\n\n        if (flag) {\n          chatRoomsArray.push(DataSnapshot.val());\n\n          _this.setState({\n            chatRooms: chatRoomsArray\n          });\n\n          _this.setState({\n            chatRoomsLoading: true\n          });\n\n          _this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n        }\n      });\n\n      _this.setState({\n        chatRoomsLoading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addNotificationListener\", function (chatRoomId, chatRoomInfo) {\n      _this.state.messagesRef.child(chatRoomId).on(\"value\", function (DataSnapshot) {\n        _this.handleNotifications(chatRoomId, _this.props.chatRoom ? _this.props.chatRoom.id : \"\", _this.state.notifications, DataSnapshot, chatRoomInfo);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNotifications\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chatRoomId, currentChatRoomId, notifications, DataSnapshot, chatRoomInfo) {\n        var lastTotal, index, firebaseSnapshot;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                lastTotal = 0;\n                index = notifications.findIndex(function (notification) {\n                  return notification.id === chatRoomId;\n                });\n\n                if (!(index === -1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                firebaseSnapshot = null;\n                _context.next = 6;\n                return firebase.database().ref(\"/chatRooms/\".concat(chatRoomId, \"/\").concat(_this.props.me.nickname)).once(\"value\").then(function (snapshot) {\n                  firebaseSnapshot = snapshot.val();\n                });\n\n              case 6:\n                if (firebaseSnapshot) {\n                  notifications.push({\n                    id: chatRoomId,\n                    total: firebaseSnapshot.total,\n                    lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n                    count: firebaseSnapshot.count\n                  });\n                } else {\n                  notifications.push({\n                    id: chatRoomId,\n                    total: DataSnapshot.numChildren(),\n                    lastKnownTotal: DataSnapshot.numChildren(),\n                    count: 0\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 9:\n                if (chatRoomId !== currentChatRoomId) {\n                  lastTotal = notifications[index].lastKnownTotal;\n\n                  if (DataSnapshot.numChildren() - lastTotal > 0) {\n                    notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n                  }\n                } else {\n                  notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n                }\n\n                notifications[index].total = DataSnapshot.numChildren();\n\n              case 11:\n                _this.setState({\n                  notifications: notifications\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"clearNotifications\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentChatRoomId) {\n        var index, updatedNotifications;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                index = _this.state.notifications.findIndex(function (notification) {\n                  return notification.id === currentChatRoomId;\n                });\n\n                if (!(index !== -1)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                updatedNotifications = _toConsumableArray(_this.state.notifications);\n                updatedNotifications[index].lastKnownTotal = _this.state.notifications[index].total;\n                updatedNotifications[index].count = 0;\n\n                _this.setState({\n                  notifications: updatedNotifications\n                });\n\n                _context2.next = 8;\n                return _this.state.chatRoomsRef.child(currentChatRoomId).child(_this.props.me.nickname).remove();\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getNotificationCount\", function (chatRoom) {\n      var count = 0;\n\n      _this.state.notifications.forEach(function (notification) {\n        if (notification.id === chatRoom.id) {\n          count = notification.count;\n        }\n      });\n\n      if (count > 0) {\n        return count;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFirstChatRoom\", function () {\n      var firstChatRoom = _this.state.chatRooms[0];\n\n      if (_this.state.firstLoad && _this.state.chatRooms.length > 0) {\n        _this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n      }\n\n      _this.setState({\n        firstLoad: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentCleanup\", function () {\n      var lastKnown = [];\n\n      _this.state.notifications.forEach(function (notification, i) {\n        if (notification.total !== notification.lastKnownTotal) {\n          lastKnown.push({\n            chatRoomId: notification.id,\n            user: _this.props.me.nickname,\n            total: notification.total,\n            lastKnownTotal: notification.lastKnownTotal,\n            count: notification.count\n          });\n        }\n      });\n\n      if (lastKnown) {\n        lastKnown.forEach( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(v, i) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _this.state.chatRoomsRef.child(v.chatRoomId).child(_this.props.me.nickname).update(_objectSpread({}, v));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function (_x7, _x8) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    });\n\n    _this.componentCleanup = _this.componentCleanup.bind(_assertThisInitialized(_this));\n    return _this;\n  } // local state\n\n\n  _createClass(mypage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var firebaseMe, user;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return firebase.auth().signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n\n              case 2:\n                firebaseMe = null;\n                user = firebase.auth().currentUser;\n                _context4.next = 6;\n                return firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n                  firebaseMe = data.val();\n                });\n\n              case 6:\n                _context4.next = 8;\n                return firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n                  isInMypage: true\n                }));\n\n              case 8:\n                window.addEventListener(\"beforeunload\", this.componentCleanup);\n                this.addChatRoomListener();\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function () {\n      var _componentWillUnmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this2 = this;\n\n        var firebaseMe, user, lastKnown;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                firebaseMe = null;\n                user = firebase.auth().currentUser;\n                _context6.next = 4;\n                return firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n                  firebaseMe = data.val();\n                });\n\n              case 4:\n                _context6.next = 6;\n                return firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n                  isInMypage: false\n                }));\n\n              case 6:\n                window.removeEventListener(\"beforeunload\", this.componentCleanup);\n                lastKnown = [];\n                this.state.notifications.forEach(function (notification, i) {\n                  if (notification.total !== notification.lastKnownTotal) {\n                    lastKnown.push({\n                      chatRoomId: notification.id,\n                      user: _this2.props.me.nickname,\n                      total: notification.total,\n                      lastKnownTotal: notification.lastKnownTotal,\n                      count: notification.count\n                    });\n                  }\n                });\n\n                if (lastKnown) {\n                  lastKnown.forEach( /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(v, i) {\n                      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              _context5.next = 2;\n                              return _this2.state.chatRoomsRef.child(v.chatRoomId).child(_this2.props.me.nickname).update(_objectSpread({}, v));\n\n                            case 2:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    return function (_x9, _x10) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }());\n                }\n\n                this.state.chatRoomsRef.off();\n                this.state.chatRooms.forEach(function (chatRoom) {\n                  _this2.state.messagesRef.child(chatRoom.id).off();\n                });\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function componentWillUnmount() {\n        return _componentWillUnmount.apply(this, arguments);\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chatRooms = this.state.chatRooms;\n      var me = this.props.me;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n            charSet: \"utf-8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(MypageLayout, {\n          children: /*#__PURE__*/_jsxDEV(MenuWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"menu-bar\",\n              children: /*#__PURE__*/_jsxDEV(Menu, {\n                mode: \"inline\",\n                style: {\n                  height: \"100%\"\n                },\n                defaultSelectedKeys: [\"profile\"],\n                onClick: this.onChangeCurrentMenu,\n                children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n                  icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 48\n                  }, this),\n                  children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n                }, \"profile\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n                  icon: /*#__PURE__*/_jsxDEV(AppstoreOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 362,\n                    columnNumber: 49\n                  }, this),\n                  children: \"\\uB0B4 \\uD65C\\uB3D9\"\n                }, \"activity\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(SubMenu, {\n                  icon: /*#__PURE__*/_jsxDEV(MailOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 25\n                  }, this),\n                  title: \"\\uCC44\\uD305\",\n                  onClick: this.onChangeCurrentMenu,\n                  children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        color: \"transparent\"\n                      },\n                      children: \"loading\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 22\n                    }, this), chatRooms && chatRooms.map(function (v, i) {\n                      var flag = false;\n                      v.users.forEach(function (s, j) {\n                        if (me && s.clientId === me._id) flag = true;\n                      });\n\n                      if (flag) {\n                        return /*#__PURE__*/_jsxDEV(Menu.Item, {\n                          onClick: function onClick(e) {\n                            _this3.setChatRoomKey(v.id);\n\n                            _this3.onSetCurrentChatRoom(v);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"div\", {\n                            style: {\n                              display: \"flex\",\n                              justifyContent: \"space-between\"\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              style: {},\n                              children: v.users.filter(function (s, j) {\n                                if (me && s.nickname !== me.nickname) {\n                                  return s;\n                                }\n                              })[0].nickname\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 401,\n                              columnNumber: 33\n                            }, _this3), /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: /*#__PURE__*/_jsxDEV(Badge, {\n                                count: _this3.getNotificationCount(v),\n                                style: {\n                                  borderRadius: \"3px\",\n                                  fontSize: \"9px\",\n                                  padding: \"0 2px\",\n                                  height: \"13px\",\n                                  minWidth: \"13px\",\n                                  lineHeight: \"13px\"\n                                }\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 411,\n                                columnNumber: 35\n                              }, _this3)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 410,\n                              columnNumber: 33\n                            }, _this3)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 395,\n                            columnNumber: 31\n                          }, _this3)\n                        }, v.users.filter(function (s, j) {\n                          if (me && s.nickname !== me.nickname) {\n                            return s;\n                          }\n                        })[0].nickname, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 382,\n                          columnNumber: 29\n                        }, _this3);\n                      }\n\n                      flag = false;\n                    })]\n                  }, void 0, true)\n                }, \"note\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"menu-content\",\n              children: [this.state.currentMenu === \"profile\" && /*#__PURE__*/_jsxDEV(EditProfile, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 56\n              }, this), this.state.currentMenu === \"activity\" && /*#__PURE__*/_jsxDEV(MyActivityTemplate, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 57\n              }, this), this.state.currentMenu !== \"profile\" && this.state.currentMenu !== \"activity\" && /*#__PURE__*/_jsxDEV(ChatContainer, {\n                chatRoomKey: this.state.chatRoomKey\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n\n  return mypage;\n}(Component);\n\n// redux\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport var __N_SSP = true;\nexport default connect(mapStateToProps)(mypage);\n\nvar _c;\n\n$RefreshReg$(_c, \"MenuWrapper\");","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/pages/mypage.jsx"],"names":["React","Component","Menu","Badge","AppstoreOutlined","MailOutlined","UserOutlined","MypageLayout","MyActivityTemplate","styled","Head","EditProfile","ChatContainer","firebase","setCurrentChatRoomAction","connect","SubMenu","MenuWrapper","div","mypage","props","context","chatRoomsRef","database","ref","messagesRef","chatRooms","chatRoomsLoading","firstLoad","notifications","currentMenu","chatRoomKey","e","key","dispatch","setState","id","chatRoom","clearNotifications","chatRoomsArray","state","on","DataSnapshot","flag","val","users","forEach","v","i","nickname","me","push","addNotificationListener","chatRoomId","chatRoomInfo","child","handleNotifications","currentChatRoomId","lastTotal","index","findIndex","notification","firebaseSnapshot","once","then","snapshot","total","lastKnownTotal","count","numChildren","updatedNotifications","remove","firstChatRoom","length","lastKnown","user","update","componentCleanup","bind","auth","signInWithEmailAndPassword","email","firebaseMe","currentUser","uid","data","isInMypage","window","addEventListener","addChatRoomListener","removeEventListener","off","height","onChangeCurrentMenu","color","map","s","j","clientId","_id","setChatRoomKey","onSetCurrentChatRoom","display","justifyContent","filter","getNotificationCount","borderRadius","fontSize","padding","minWidth","lineHeight","mapStateToProps","chat","currentChatRoom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport {\n  AppstoreOutlined,\n  MailOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport wrapper from \"../store/configureStore\";\nimport { setUserRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../lib/api/client\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n\n// style\n\nconst { SubMenu } = Menu;\n\nconst MenuWrapper = styled.div`\n  display: flex;\n  .menu-bar {\n    flex: 1;\n    width: 200px;\n    height: 90vh;\n    .ant-menu-item {\n      &:hover {\n        color: #111;\n      }\n    }\n    .ant-menu-item-selected {\n      background: #4f528a;\n      color: #fff;\n      &::after {\n        border-right: none;\n      }\n      &:hover {\n        color: #fff;\n      }\n    }\n    .ant-menu-submenu-title {\n      &:hover {\n        color: #111;\n        .ant-menu-submenu-arrow {\n          color: #111;\n        }\n      }\n    }\n  }\n  .menu-content {\n    flex: 4;\n  }\n  @media (max-width: 768px) {\n    flex-direction: column;\n    .menu-bar {\n      height: 100%;\n      width: 100%;\n    }\n    .menu-content {\n      margin-bottom: 3rem;\n    }\n  }\n`;\n\nclass mypage extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.componentCleanup = this.componentCleanup.bind(this);\n  }\n\n  // local state\n\n  state = {\n    chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    chatRooms: [],\n    chatRoomsLoading: false,\n    firstLoad: true,\n    notifications: [],\n    currentMenu: \"profile\",\n    chatRoomKey: \"\",\n  };\n\n  // event listener\n\n  onChangeCurrentMenu = (e) => {\n    if (e.key === \"profile\" || e.key == \"activity\") {\n      this.props.dispatch(setCurrentChatRoomAction(null));\n    }\n    this.setState({ currentMenu: e.key });\n  };\n\n  setChatRoomKey = (id) => {\n    this.setState({ chatRoomKey: id });\n  };\n\n  onSetCurrentChatRoom = (chatRoom) => {\n    this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n    this.clearNotifications(chatRoom.id);\n  };\n\n  addChatRoomListener = () => {\n    let chatRoomsArray = [];\n\n    this.state.chatRoomsRef.on(\"child_added\", (DataSnapshot) => {\n      let flag = false;\n      DataSnapshot.val().users.forEach((v, i) => {\n        if (v.nickname === this.props.me.nickname) {\n          flag = true;\n        }\n      });\n\n      if (flag) {\n        chatRoomsArray.push(DataSnapshot.val());\n        this.setState({ chatRooms: chatRoomsArray });\n        this.setState({ chatRoomsLoading: true });\n        this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n      }\n    });\n    this.setState({ chatRoomsLoading: false });\n  };\n\n  addNotificationListener = (chatRoomId, chatRoomInfo) => {\n    this.state.messagesRef.child(chatRoomId).on(\"value\", (DataSnapshot) => {\n      this.handleNotifications(\n        chatRoomId,\n        this.props.chatRoom ? this.props.chatRoom.id : \"\",\n        this.state.notifications,\n        DataSnapshot,\n        chatRoomInfo,\n      );\n    });\n  };\n\n  // helper method\n\n  handleNotifications = async (\n    chatRoomId,\n    currentChatRoomId,\n    notifications,\n    DataSnapshot,\n    chatRoomInfo,\n  ) => {\n    let lastTotal = 0;\n\n    let index = notifications.findIndex(\n      (notification) => notification.id === chatRoomId,\n    );\n\n    if (index === -1) {\n      let firebaseSnapshot = null;\n      await firebase\n        .database()\n        .ref(`/chatRooms/${chatRoomId}/${this.props.me.nickname}`)\n        .once(\"value\")\n        .then((snapshot) => {\n          firebaseSnapshot = snapshot.val();\n        });\n\n      if (firebaseSnapshot) {\n        notifications.push({\n          id: chatRoomId,\n          total: firebaseSnapshot.total,\n          lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n          count: firebaseSnapshot.count,\n        });\n      } else {\n        notifications.push({\n          id: chatRoomId,\n          total: DataSnapshot.numChildren(),\n          lastKnownTotal: DataSnapshot.numChildren(),\n          count: 0,\n        });\n      }\n    } else {\n      if (chatRoomId !== currentChatRoomId) {\n        lastTotal = notifications[index].lastKnownTotal;\n\n        if (DataSnapshot.numChildren() - lastTotal > 0) {\n          notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n        }\n      } else {\n        notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n      }\n      notifications[index].total = DataSnapshot.numChildren();\n    }\n    this.setState({ notifications });\n  };\n\n  clearNotifications = async (currentChatRoomId) => {\n    let index = this.state.notifications.findIndex(\n      (notification) => notification.id === currentChatRoomId,\n    );\n\n    if (index !== -1) {\n      let updatedNotifications = [...this.state.notifications];\n      updatedNotifications[index].lastKnownTotal = this.state.notifications[\n        index\n      ].total;\n      updatedNotifications[index].count = 0;\n      this.setState({ notifications: updatedNotifications });\n      await this.state.chatRoomsRef\n        .child(currentChatRoomId)\n        .child(this.props.me.nickname)\n        .remove();\n    }\n  };\n\n  getNotificationCount = (chatRoom) => {\n    let count = 0;\n\n    this.state.notifications.forEach((notification) => {\n      if (notification.id === chatRoom.id) {\n        count = notification.count;\n      }\n    });\n\n    if (count > 0) {\n      return count;\n    }\n  };\n\n  setFirstChatRoom = () => {\n    const firstChatRoom = this.state.chatRooms[0];\n    if (this.state.firstLoad && this.state.chatRooms.length > 0) {\n      this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n    }\n    this.setState({ firstLoad: false });\n  };\n\n  // life cycle method\n\n  componentCleanup = () => {\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count,\n        });\n      }\n    });\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef\n          .child(v.chatRoomId)\n          .child(this.props.me.nickname)\n          .update({ ...v });\n      });\n    }\n  };\n\n  async componentDidMount() {\n    await firebase\n      .auth()\n      .signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .once(\"value\", function (data) {\n        firebaseMe = data.val();\n      });\n\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .update({ ...firebaseMe, isInMypage: true });\n\n    window.addEventListener(\"beforeunload\", this.componentCleanup);\n\n    this.addChatRoomListener();\n  }\n\n  async componentWillUnmount() {\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .once(\"value\", function (data) {\n        firebaseMe = data.val();\n      });\n\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .update({ ...firebaseMe, isInMypage: false });\n\n    window.removeEventListener(\"beforeunload\", this.componentCleanup);\n\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count,\n        });\n      }\n    });\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef\n          .child(v.chatRoomId)\n          .child(this.props.me.nickname)\n          .update({ ...v });\n      });\n    }\n\n    this.state.chatRoomsRef.off();\n    this.state.chatRooms.forEach((chatRoom) => {\n      this.state.messagesRef.child(chatRoom.id).off();\n    });\n  }\n\n  render() {\n    const { chatRooms } = this.state;\n    const { me } = this.props;\n    return (\n      <>\n        <Head>\n          <meta charSet=\"utf-8\"></meta>\n          <title>마이페이지</title>\n        </Head>\n\n        <MypageLayout>\n          <MenuWrapper>\n            <div className=\"menu-bar\">\n              <Menu\n                mode=\"inline\"\n                style={{ height: \"100%\" }}\n                defaultSelectedKeys={[\"profile\"]}\n                onClick={this.onChangeCurrentMenu}\n              >\n                <Menu.Item key=\"profile\" icon={<UserOutlined />}>\n                  프로필 수정\n                </Menu.Item>\n                <Menu.Item key=\"activity\" icon={<AppstoreOutlined />}>\n                  내 활동\n                </Menu.Item>\n\n                <SubMenu\n                  key=\"note\"\n                  icon={<MailOutlined />}\n                  title=\"채팅\"\n                  onClick={this.onChangeCurrentMenu}\n                >\n                  <>\n                    {<span style={{ color: \"transparent\" }}>loading</span>}\n                    {chatRooms &&\n                      chatRooms.map((v, i) => {\n                        let flag = false;\n                        v.users.forEach((s, j) => {\n                          if (me && s.clientId === me._id) flag = true;\n                        });\n                        if (flag) {\n                          return (\n                            <Menu.Item\n                              key={\n                                v.users.filter((s, j) => {\n                                  if (me && s.nickname !== me.nickname) {\n                                    return s;\n                                  }\n                                })[0].nickname\n                              }\n                              onClick={(e) => {\n                                this.setChatRoomKey(v.id);\n                                this.onSetCurrentChatRoom(v);\n                              }}\n                            >\n                              <div\n                                style={{\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                }}\n                              >\n                                <span style={{}}>\n                                  {\n                                    v.users.filter((s, j) => {\n                                      if (me && s.nickname !== me.nickname) {\n                                        return s;\n                                      }\n                                    })[0].nickname\n                                  }\n                                </span>\n                                <span>\n                                  <Badge\n                                    count={this.getNotificationCount(v)}\n                                    style={{\n                                      borderRadius: \"3px\",\n                                      fontSize: \"9px\",\n                                      padding: \"0 2px\",\n                                      height: \"13px\",\n                                      minWidth: \"13px\",\n                                      lineHeight: \"13px\",\n                                    }}\n                                  />\n                                </span>\n                              </div>\n                            </Menu.Item>\n                          );\n                        }\n                        flag = false;\n                      })}\n                  </>\n                </SubMenu>\n              </Menu>\n            </div>\n            <div className=\"menu-content\">\n              {this.state.currentMenu === \"profile\" && <EditProfile />}\n              {this.state.currentMenu === \"activity\" && <MyActivityTemplate />}\n              {this.state.currentMenu !== \"profile\" &&\n                this.state.currentMenu !== \"activity\" && (\n                  <ChatContainer chatRoomKey={this.state.chatRoomKey} />\n                )}\n            </div>\n          </MenuWrapper>\n        </MypageLayout>\n      </>\n    );\n  }\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    client.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      client.defaults.withCredentials = true;\n      client.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(setUserRequestAction());\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  },\n);\n\n// redux\n\nconst mapStateToProps = (state) => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom,\n  };\n};\n\nexport default connect(mapStateToProps)(mypage);\n"]},"metadata":{},"sourceType":"module"}