{"ast":null,"code":"var _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/pages/mypage.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport { AppstoreOutlined, MailOutlined, UserOutlined } from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport wrapper from \"../store/configureStore\";\nimport { setUserRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../lib/api/client\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  SubMenu\n} = Menu;\nconst MenuWrapper = styled.div.withConfig({\n  displayName: \"mypage__MenuWrapper\",\n  componentId: \"sc-148fna2-0\"\n})([\"display:flex;.menu-bar{flex:1;width:200px;height:90vh;.ant-menu-item{&:hover{color:#111;}}.ant-menu-item-selected{background:#4f528a;color:#fff;&::after{border-right:none;}&:hover{color:#fff;}}.ant-menu-submenu-title{&:hover{color:#111;.ant-menu-submenu-arrow{color:#111;}}}}.menu-content{flex:4;}@media (max-width:768px){flex-direction:column;.menu-bar{height:100%;width:100%;}.menu-content{margin-bottom:3rem;}}\"]);\n\nclass mypage extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"state\", {\n      chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      chatRooms: [],\n      chatRoomsLoading: false,\n      firstLoad: true,\n      notifications: [],\n      currentMenu: \"profile\",\n      chatRoomKey: \"\"\n    });\n\n    _defineProperty(this, \"onChangeCurrentMenu\", e => {\n      if (e.key === \"profile\" || e.key == \"activity\") {\n        this.props.dispatch(setCurrentChatRoomAction(null));\n      }\n\n      this.setState({\n        currentMenu: e.key\n      });\n    });\n\n    _defineProperty(this, \"setChatRoomKey\", id => {\n      this.setState({\n        chatRoomKey: id\n      });\n    });\n\n    _defineProperty(this, \"onSetCurrentChatRoom\", chatRoom => {\n      this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n      this.clearNotifications(chatRoom.id);\n    });\n\n    _defineProperty(this, \"addChatRoomListener\", () => {\n      let chatRoomsArray = [];\n      this.state.chatRoomsRef.on(\"child_added\", DataSnapshot => {\n        let flag = false;\n        DataSnapshot.val().users.forEach((v, i) => {\n          if (v.nickname === this.props.me.nickname) {\n            flag = true;\n          }\n        });\n\n        if (flag) {\n          chatRoomsArray.push(DataSnapshot.val());\n          this.setState({\n            chatRooms: chatRoomsArray\n          });\n          this.setState({\n            chatRoomsLoading: true\n          });\n          this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n        }\n      });\n      this.setState({\n        chatRoomsLoading: false\n      });\n    });\n\n    _defineProperty(this, \"addNotificationListener\", (chatRoomId, chatRoomInfo) => {\n      this.state.messagesRef.child(chatRoomId).on(\"value\", DataSnapshot => {\n        this.handleNotifications(chatRoomId, this.props.chatRoom ? this.props.chatRoom.id : \"\", this.state.notifications, DataSnapshot, chatRoomInfo);\n      });\n    });\n\n    _defineProperty(this, \"handleNotifications\", async (chatRoomId, currentChatRoomId, notifications, DataSnapshot, chatRoomInfo) => {\n      let lastTotal = 0;\n      let index = notifications.findIndex(notification => notification.id === chatRoomId);\n\n      if (index === -1) {\n        let firebaseSnapshot = null;\n        await firebase.database().ref(`/chatRooms/${chatRoomId}/${this.props.me.nickname}`).once(\"value\").then(snapshot => {\n          firebaseSnapshot = snapshot.val();\n        });\n\n        if (firebaseSnapshot) {\n          notifications.push({\n            id: chatRoomId,\n            total: firebaseSnapshot.total,\n            lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n            count: firebaseSnapshot.count\n          });\n        } else {\n          notifications.push({\n            id: chatRoomId,\n            total: DataSnapshot.numChildren(),\n            lastKnownTotal: DataSnapshot.numChildren(),\n            count: 0\n          });\n        }\n      } else {\n        if (chatRoomId !== currentChatRoomId) {\n          lastTotal = notifications[index].lastKnownTotal;\n\n          if (DataSnapshot.numChildren() - lastTotal > 0) {\n            notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n          }\n        } else {\n          notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n        }\n\n        notifications[index].total = DataSnapshot.numChildren();\n      }\n\n      this.setState({\n        notifications\n      });\n    });\n\n    _defineProperty(this, \"clearNotifications\", async currentChatRoomId => {\n      let index = this.state.notifications.findIndex(notification => notification.id === currentChatRoomId);\n\n      if (index !== -1) {\n        let updatedNotifications = [...this.state.notifications];\n        updatedNotifications[index].lastKnownTotal = this.state.notifications[index].total;\n        updatedNotifications[index].count = 0;\n        this.setState({\n          notifications: updatedNotifications\n        });\n        await this.state.chatRoomsRef.child(currentChatRoomId).child(this.props.me.nickname).remove();\n      }\n    });\n\n    _defineProperty(this, \"getNotificationCount\", chatRoom => {\n      let count = 0;\n      this.state.notifications.forEach(notification => {\n        if (notification.id === chatRoom.id) {\n          count = notification.count;\n        }\n      });\n\n      if (count > 0) {\n        return count;\n      }\n    });\n\n    _defineProperty(this, \"setFirstChatRoom\", () => {\n      const firstChatRoom = this.state.chatRooms[0];\n\n      if (this.state.firstLoad && this.state.chatRooms.length > 0) {\n        this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n      }\n\n      this.setState({\n        firstLoad: false\n      });\n    });\n\n    _defineProperty(this, \"componentCleanup\", () => {\n      let lastKnown = [];\n      this.state.notifications.forEach((notification, i) => {\n        if (notification.total !== notification.lastKnownTotal) {\n          lastKnown.push({\n            chatRoomId: notification.id,\n            user: this.props.me.nickname,\n            total: notification.total,\n            lastKnownTotal: notification.lastKnownTotal,\n            count: notification.count\n          });\n        }\n      });\n\n      if (lastKnown) {\n        lastKnown.forEach(async (v, i) => {\n          await this.state.chatRoomsRef.child(v.chatRoomId).child(this.props.me.nickname).update(_objectSpread({}, v));\n        });\n      }\n    });\n\n    this.componentCleanup = this.componentCleanup.bind(this);\n  } // local state\n\n\n  async componentDidMount() {\n    await firebase.auth().signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n      firebaseMe = data.val();\n    });\n    await firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n      isInMypage: true\n    }));\n    window.addEventListener(\"beforeunload\", this.componentCleanup);\n    this.addChatRoomListener();\n  }\n\n  async componentWillUnmount() {\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n      firebaseMe = data.val();\n    });\n    await firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n      isInMypage: false\n    }));\n    window.removeEventListener(\"beforeunload\", this.componentCleanup);\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count\n        });\n      }\n    });\n\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef.child(v.chatRoomId).child(this.props.me.nickname).update(_objectSpread({}, v));\n      });\n    }\n\n    this.state.chatRoomsRef.off();\n    this.state.chatRooms.forEach(chatRoom => {\n      this.state.messagesRef.child(chatRoom.id).off();\n    });\n  }\n\n  render() {\n    const {\n      chatRooms\n    } = this.state;\n    const {\n      me\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          charSet: \"utf-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MypageLayout, {\n        children: /*#__PURE__*/_jsxDEV(MenuWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-bar\",\n            children: /*#__PURE__*/_jsxDEV(Menu, {\n              mode: \"inline\",\n              style: {\n                height: \"100%\"\n              },\n              defaultSelectedKeys: [\"profile\"],\n              onClick: this.onChangeCurrentMenu,\n              children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 48\n                }, this),\n                children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n              }, \"profile\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n                icon: /*#__PURE__*/_jsxDEV(AppstoreOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 49\n                }, this),\n                children: \"\\uB0B4 \\uD65C\\uB3D9\"\n              }, \"activity\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SubMenu, {\n                icon: /*#__PURE__*/_jsxDEV(MailOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 25\n                }, this),\n                title: \"\\uCC44\\uD305\",\n                onClick: this.onChangeCurrentMenu,\n                children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: \"transparent\"\n                    },\n                    children: \"loading\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 22\n                  }, this), chatRooms && chatRooms.map((v, i) => {\n                    let flag = false;\n                    v.users.forEach((s, j) => {\n                      if (me && s.clientId === me._id) flag = true;\n                    });\n\n                    if (flag) {\n                      return /*#__PURE__*/_jsxDEV(Menu.Item, {\n                        onClick: e => {\n                          this.setChatRoomKey(v.id);\n                          this.onSetCurrentChatRoom(v);\n                        },\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: {\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {},\n                            children: v.users.filter((s, j) => {\n                              if (me && s.nickname !== me.nickname) {\n                                return s;\n                              }\n                            })[0].nickname\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 401,\n                            columnNumber: 33\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: /*#__PURE__*/_jsxDEV(Badge, {\n                              count: this.getNotificationCount(v),\n                              style: {\n                                borderRadius: \"3px\",\n                                fontSize: \"9px\",\n                                padding: \"0 2px\",\n                                height: \"13px\",\n                                minWidth: \"13px\",\n                                lineHeight: \"13px\"\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 411,\n                              columnNumber: 35\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 410,\n                            columnNumber: 33\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 395,\n                          columnNumber: 31\n                        }, this)\n                      }, v.users.filter((s, j) => {\n                        if (me && s.nickname !== me.nickname) {\n                          return s;\n                        }\n                      })[0].nickname, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 382,\n                        columnNumber: 29\n                      }, this);\n                    }\n\n                    flag = false;\n                  })]\n                }, void 0, true)\n              }, \"note\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-content\",\n            children: [this.state.currentMenu === \"profile\" && /*#__PURE__*/_jsxDEV(EditProfile, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 56\n            }, this), this.state.currentMenu === \"activity\" && /*#__PURE__*/_jsxDEV(MyActivityTemplate, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 57\n            }, this), this.state.currentMenu !== \"profile\" && this.state.currentMenu !== \"activity\" && /*#__PURE__*/_jsxDEV(ChatContainer, {\n              chatRoomKey: this.state.chatRoomKey\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  client.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    client.defaults.withCredentials = true;\n    client.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(setUserRequestAction());\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n}); // redux\n\nconst mapStateToProps = state => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(mypage);","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/pages/mypage.jsx"],"names":["React","Component","Menu","Badge","AppstoreOutlined","MailOutlined","UserOutlined","MypageLayout","MyActivityTemplate","styled","Head","EditProfile","ChatContainer","wrapper","setUserRequestAction","END","client","firebase","setCurrentChatRoomAction","connect","SubMenu","MenuWrapper","div","mypage","constructor","props","context","chatRoomsRef","database","ref","messagesRef","chatRooms","chatRoomsLoading","firstLoad","notifications","currentMenu","chatRoomKey","e","key","dispatch","setState","id","chatRoom","clearNotifications","chatRoomsArray","state","on","DataSnapshot","flag","val","users","forEach","v","i","nickname","me","push","addNotificationListener","chatRoomId","chatRoomInfo","child","handleNotifications","currentChatRoomId","lastTotal","index","findIndex","notification","firebaseSnapshot","once","then","snapshot","total","lastKnownTotal","count","numChildren","updatedNotifications","remove","firstChatRoom","length","lastKnown","user","update","componentCleanup","bind","componentDidMount","auth","signInWithEmailAndPassword","email","firebaseMe","currentUser","uid","data","isInMypage","window","addEventListener","addChatRoomListener","componentWillUnmount","removeEventListener","off","render","height","onChangeCurrentMenu","color","map","s","j","clientId","_id","setChatRoomKey","onSetCurrentChatRoom","display","justifyContent","filter","getNotificationCount","borderRadius","fontSize","padding","minWidth","lineHeight","getServerSideProps","cookie","req","headers","defaults","Cookie","withCredentials","store","sagaTask","toPromise","mapStateToProps","chat","currentChatRoom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport {\n  AppstoreOutlined,\n  MailOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport wrapper from \"../store/configureStore\";\nimport { setUserRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../lib/api/client\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n\n// style\n\nconst { SubMenu } = Menu;\n\nconst MenuWrapper = styled.div`\n  display: flex;\n  .menu-bar {\n    flex: 1;\n    width: 200px;\n    height: 90vh;\n    .ant-menu-item {\n      &:hover {\n        color: #111;\n      }\n    }\n    .ant-menu-item-selected {\n      background: #4f528a;\n      color: #fff;\n      &::after {\n        border-right: none;\n      }\n      &:hover {\n        color: #fff;\n      }\n    }\n    .ant-menu-submenu-title {\n      &:hover {\n        color: #111;\n        .ant-menu-submenu-arrow {\n          color: #111;\n        }\n      }\n    }\n  }\n  .menu-content {\n    flex: 4;\n  }\n  @media (max-width: 768px) {\n    flex-direction: column;\n    .menu-bar {\n      height: 100%;\n      width: 100%;\n    }\n    .menu-content {\n      margin-bottom: 3rem;\n    }\n  }\n`;\n\nclass mypage extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.componentCleanup = this.componentCleanup.bind(this);\n  }\n\n  // local state\n\n  state = {\n    chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    chatRooms: [],\n    chatRoomsLoading: false,\n    firstLoad: true,\n    notifications: [],\n    currentMenu: \"profile\",\n    chatRoomKey: \"\",\n  };\n\n  // event listener\n\n  onChangeCurrentMenu = (e) => {\n    if (e.key === \"profile\" || e.key == \"activity\") {\n      this.props.dispatch(setCurrentChatRoomAction(null));\n    }\n    this.setState({ currentMenu: e.key });\n  };\n\n  setChatRoomKey = (id) => {\n    this.setState({ chatRoomKey: id });\n  };\n\n  onSetCurrentChatRoom = (chatRoom) => {\n    this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n    this.clearNotifications(chatRoom.id);\n  };\n\n  addChatRoomListener = () => {\n    let chatRoomsArray = [];\n\n    this.state.chatRoomsRef.on(\"child_added\", (DataSnapshot) => {\n      let flag = false;\n      DataSnapshot.val().users.forEach((v, i) => {\n        if (v.nickname === this.props.me.nickname) {\n          flag = true;\n        }\n      });\n\n      if (flag) {\n        chatRoomsArray.push(DataSnapshot.val());\n        this.setState({ chatRooms: chatRoomsArray });\n        this.setState({ chatRoomsLoading: true });\n        this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n      }\n    });\n    this.setState({ chatRoomsLoading: false });\n  };\n\n  addNotificationListener = (chatRoomId, chatRoomInfo) => {\n    this.state.messagesRef.child(chatRoomId).on(\"value\", (DataSnapshot) => {\n      this.handleNotifications(\n        chatRoomId,\n        this.props.chatRoom ? this.props.chatRoom.id : \"\",\n        this.state.notifications,\n        DataSnapshot,\n        chatRoomInfo,\n      );\n    });\n  };\n\n  // helper method\n\n  handleNotifications = async (\n    chatRoomId,\n    currentChatRoomId,\n    notifications,\n    DataSnapshot,\n    chatRoomInfo,\n  ) => {\n    let lastTotal = 0;\n\n    let index = notifications.findIndex(\n      (notification) => notification.id === chatRoomId,\n    );\n\n    if (index === -1) {\n      let firebaseSnapshot = null;\n      await firebase\n        .database()\n        .ref(`/chatRooms/${chatRoomId}/${this.props.me.nickname}`)\n        .once(\"value\")\n        .then((snapshot) => {\n          firebaseSnapshot = snapshot.val();\n        });\n\n      if (firebaseSnapshot) {\n        notifications.push({\n          id: chatRoomId,\n          total: firebaseSnapshot.total,\n          lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n          count: firebaseSnapshot.count,\n        });\n      } else {\n        notifications.push({\n          id: chatRoomId,\n          total: DataSnapshot.numChildren(),\n          lastKnownTotal: DataSnapshot.numChildren(),\n          count: 0,\n        });\n      }\n    } else {\n      if (chatRoomId !== currentChatRoomId) {\n        lastTotal = notifications[index].lastKnownTotal;\n\n        if (DataSnapshot.numChildren() - lastTotal > 0) {\n          notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n        }\n      } else {\n        notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n      }\n      notifications[index].total = DataSnapshot.numChildren();\n    }\n    this.setState({ notifications });\n  };\n\n  clearNotifications = async (currentChatRoomId) => {\n    let index = this.state.notifications.findIndex(\n      (notification) => notification.id === currentChatRoomId,\n    );\n\n    if (index !== -1) {\n      let updatedNotifications = [...this.state.notifications];\n      updatedNotifications[index].lastKnownTotal = this.state.notifications[\n        index\n      ].total;\n      updatedNotifications[index].count = 0;\n      this.setState({ notifications: updatedNotifications });\n      await this.state.chatRoomsRef\n        .child(currentChatRoomId)\n        .child(this.props.me.nickname)\n        .remove();\n    }\n  };\n\n  getNotificationCount = (chatRoom) => {\n    let count = 0;\n\n    this.state.notifications.forEach((notification) => {\n      if (notification.id === chatRoom.id) {\n        count = notification.count;\n      }\n    });\n\n    if (count > 0) {\n      return count;\n    }\n  };\n\n  setFirstChatRoom = () => {\n    const firstChatRoom = this.state.chatRooms[0];\n    if (this.state.firstLoad && this.state.chatRooms.length > 0) {\n      this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n    }\n    this.setState({ firstLoad: false });\n  };\n\n  // life cycle method\n\n  componentCleanup = () => {\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count,\n        });\n      }\n    });\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef\n          .child(v.chatRoomId)\n          .child(this.props.me.nickname)\n          .update({ ...v });\n      });\n    }\n  };\n\n  async componentDidMount() {\n    await firebase\n      .auth()\n      .signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .once(\"value\", function (data) {\n        firebaseMe = data.val();\n      });\n\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .update({ ...firebaseMe, isInMypage: true });\n\n    window.addEventListener(\"beforeunload\", this.componentCleanup);\n\n    this.addChatRoomListener();\n  }\n\n  async componentWillUnmount() {\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .once(\"value\", function (data) {\n        firebaseMe = data.val();\n      });\n\n    await firebase\n      .database()\n      .ref(\"users\")\n      .child(user.uid)\n      .update({ ...firebaseMe, isInMypage: false });\n\n    window.removeEventListener(\"beforeunload\", this.componentCleanup);\n\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count,\n        });\n      }\n    });\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef\n          .child(v.chatRoomId)\n          .child(this.props.me.nickname)\n          .update({ ...v });\n      });\n    }\n\n    this.state.chatRoomsRef.off();\n    this.state.chatRooms.forEach((chatRoom) => {\n      this.state.messagesRef.child(chatRoom.id).off();\n    });\n  }\n\n  render() {\n    const { chatRooms } = this.state;\n    const { me } = this.props;\n    return (\n      <>\n        <Head>\n          <meta charSet=\"utf-8\"></meta>\n          <title>마이페이지</title>\n        </Head>\n\n        <MypageLayout>\n          <MenuWrapper>\n            <div className=\"menu-bar\">\n              <Menu\n                mode=\"inline\"\n                style={{ height: \"100%\" }}\n                defaultSelectedKeys={[\"profile\"]}\n                onClick={this.onChangeCurrentMenu}\n              >\n                <Menu.Item key=\"profile\" icon={<UserOutlined />}>\n                  프로필 수정\n                </Menu.Item>\n                <Menu.Item key=\"activity\" icon={<AppstoreOutlined />}>\n                  내 활동\n                </Menu.Item>\n\n                <SubMenu\n                  key=\"note\"\n                  icon={<MailOutlined />}\n                  title=\"채팅\"\n                  onClick={this.onChangeCurrentMenu}\n                >\n                  <>\n                    {<span style={{ color: \"transparent\" }}>loading</span>}\n                    {chatRooms &&\n                      chatRooms.map((v, i) => {\n                        let flag = false;\n                        v.users.forEach((s, j) => {\n                          if (me && s.clientId === me._id) flag = true;\n                        });\n                        if (flag) {\n                          return (\n                            <Menu.Item\n                              key={\n                                v.users.filter((s, j) => {\n                                  if (me && s.nickname !== me.nickname) {\n                                    return s;\n                                  }\n                                })[0].nickname\n                              }\n                              onClick={(e) => {\n                                this.setChatRoomKey(v.id);\n                                this.onSetCurrentChatRoom(v);\n                              }}\n                            >\n                              <div\n                                style={{\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                }}\n                              >\n                                <span style={{}}>\n                                  {\n                                    v.users.filter((s, j) => {\n                                      if (me && s.nickname !== me.nickname) {\n                                        return s;\n                                      }\n                                    })[0].nickname\n                                  }\n                                </span>\n                                <span>\n                                  <Badge\n                                    count={this.getNotificationCount(v)}\n                                    style={{\n                                      borderRadius: \"3px\",\n                                      fontSize: \"9px\",\n                                      padding: \"0 2px\",\n                                      height: \"13px\",\n                                      minWidth: \"13px\",\n                                      lineHeight: \"13px\",\n                                    }}\n                                  />\n                                </span>\n                              </div>\n                            </Menu.Item>\n                          );\n                        }\n                        flag = false;\n                      })}\n                  </>\n                </SubMenu>\n              </Menu>\n            </div>\n            <div className=\"menu-content\">\n              {this.state.currentMenu === \"profile\" && <EditProfile />}\n              {this.state.currentMenu === \"activity\" && <MyActivityTemplate />}\n              {this.state.currentMenu !== \"profile\" &&\n                this.state.currentMenu !== \"activity\" && (\n                  <ChatContainer chatRoomKey={this.state.chatRoomKey} />\n                )}\n            </div>\n          </MenuWrapper>\n        </MypageLayout>\n      </>\n    );\n  }\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    client.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      client.defaults.withCredentials = true;\n      client.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(setUserRequestAction());\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  },\n);\n\n// redux\n\nconst mapStateToProps = (state) => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom,\n  };\n};\n\nexport default connect(mapStateToProps)(mypage);\n"]},"metadata":{},"sourceType":"module"}