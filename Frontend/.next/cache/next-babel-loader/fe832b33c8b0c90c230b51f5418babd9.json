{"ast":null,"code":"import { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE, SET_USER_REQUEST, SET_USER_SUCCESS, SET_USER_FAILURE } from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 유저 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n// saga\n\nfunction* setUserSaga(action) {\n  try {\n    const res = yield call(setUser);\n\n    if (!res.data.user) {\n      yield put({\n        type: SET_USER_SUCCESS,\n        user: null\n      });\n    } else {\n      yield put({\n        type: SET_USER_SUCCESS,\n        user: res.data.user\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: SET_USER_FAILURE\n    });\n  }\n}\n\nfunction* loginSaga(action) {\n  try {\n    const res = yield call(login, action.payload);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      user: res.data.user\n    });\n  } catch (error) {\n    console.log(error);\n    alert(\"이메일 인증을 완료해주세요.\");\n    axios.post(`/api/mailAuth`, {\n      email: action.payload.email\n    }).then(res => {\n      alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n    }).catch(err => {\n      console.log(err);\n    });\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* logoutSaga(action) {\n  try {\n    yield call(logout);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n    window.location.href = `http://localhost:3000`;\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n} // -> deprecated\n\n\nfunction* registerSaga(action) {\n  try {\n    yield call(register, action.data);\n    yield put({\n      type: REGISTER_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: REGISTER_FAILURE\n    });\n  }\n} // watcher\n\n\nexport function* watchUser() {\n  yield takeLatest(SET_USER_REQUEST, setUserSaga);\n  yield takeLatest(LOG_IN_REQUEST, loginSaga);\n  yield takeLatest(LOG_OUT_REQUEST, logoutSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n}","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/sagas/user.js"],"names":["takeLatest","call","put","delay","throttle","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","SET_USER_REQUEST","SET_USER_SUCCESS","SET_USER_FAILURE","register","login","setUser","logout","axios","setUserSaga","action","res","data","user","type","error","console","log","loginSaga","payload","alert","post","email","then","catch","err","logoutSaga","window","location","href","registerSaga","watchUser"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  SET_USER_REQUEST,\n  SET_USER_SUCCESS,\n  SET_USER_FAILURE,\n} from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 유저 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n\n// saga\n\nfunction* setUserSaga(action) {\n  try {\n    const res = yield call(setUser);\n    if (!res.data.user) {\n      yield put({ type: SET_USER_SUCCESS, user: null });\n    } else {\n      yield put({ type: SET_USER_SUCCESS, user: res.data.user });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({ type: SET_USER_FAILURE });\n  }\n}\n\nfunction* loginSaga(action) {\n  try {\n    const res = yield call(login, action.payload);\n    yield put({ type: LOG_IN_SUCCESS, user: res.data.user });\n  } catch (error) {\n    console.log(error);\n    alert(\"이메일 인증을 완료해주세요.\");\n    axios\n      .post(`/api/mailAuth`, { email: action.payload.email })\n      .then((res) => {\n        alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    yield put({ type: LOG_IN_FAILURE });\n  }\n}\n\nfunction* logoutSaga(action) {\n  try {\n    yield call(logout);\n    yield put({ type: LOG_OUT_SUCCESS });\n    window.location.href = `http://localhost:3000`;\n  } catch (error) {\n    console.log(error);\n    yield put({ type: LOG_OUT_FAILURE });\n  }\n}\n\n// -> deprecated\nfunction* registerSaga(action) {\n  try {\n    yield call(register, action.data);\n    yield put({ type: REGISTER_SUCCESS });\n  } catch (error) {\n    yield put({ type: REGISTER_FAILURE });\n  }\n}\n\n// watcher\n\nexport function* watchUser() {\n  yield takeLatest(SET_USER_REQUEST, setUserSaga);\n  yield takeLatest(LOG_IN_REQUEST, loginSaga);\n  yield takeLatest(LOG_OUT_REQUEST, logoutSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n}\n"]},"metadata":{},"sourceType":"module"}