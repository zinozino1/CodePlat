{"ast":null,"code":"var _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/components/chat/ChatBody.jsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = styled.div.withConfig({\n  displayName: \"ChatBody__ChatContainer\",\n  componentId: \"sc-1cur02d-0\"\n})([\"height:60vh;margin:30px;overflow:auto;border:1px solid #ddd;border-radius:4px;padding:0 5px;padding-top:20px;background:#eee;\"]);\nconst MessageWrapper = styled.div.withConfig({\n  displayName: \"ChatBody__MessageWrapper\",\n  componentId: \"sc-1cur02d-1\"\n})([\"padding:5px;.message-timestamp{font-size:10px;color:#999;margin:0 5px;}\", \"\"], props => props.type === \"me\" ? css([\"text-align:right;.message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fee500;}\"], props => props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"])) : css([\".message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fff;color:#111;}\"], props => props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"])));\nexport class ChatBody extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"messagesEnd\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"state\", {\n      messages: [],\n      messagesRef: firebase.database().ref(\"messages\")\n    });\n\n    _defineProperty(this, \"addMessagesListeners\", chatRoomId => {\n      let messagesArray = [];\n      this.setState({\n        messages: []\n      });\n      this.state.messagesRef.child(chatRoomId).on(\"child_added\", DataSnapshot => {\n        messagesArray.push(DataSnapshot.val());\n        this.setState({\n          messages: messagesArray\n        });\n      });\n    });\n\n    _defineProperty(this, \"scrollToBottom\", () => {\n      this.scrollRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(this, \"renderMessages\", messages => messages.length > 0 && messages.map((v, i) => {\n      const {\n        me\n      } = this.props;\n\n      if (v.user.clientId === me._id) {\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          type: \"me\",\n          wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-timestamp\",\n            children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-content\",\n            children: v.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, v.timestamp, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n          type: \"opponent\",\n          wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-content\",\n            children: v.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-timestamp\",\n            children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, v.timestamp, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this);\n      }\n    }));\n  }\n\n  // life cycle method\n  componentDidMount() {\n    const {\n      chatRoom\n    } = this.props;\n\n    if (chatRoom) {\n      this.addMessagesListeners(chatRoom.id);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.messagesRef.off();\n    this.messagesEnd = null;\n  } // event listener\n\n\n  render() {\n    const {\n      messages\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [this.renderMessages(messages), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: node => this.messagesEnd = node\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n\n} // redux\n\nconst mapStateToProps = state => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/components/chat/ChatBody.jsx"],"names":["React","Component","styled","css","firebase","moment","connect","ChatContainer","div","MessageWrapper","props","type","wordbreak","ChatBody","createRef","messages","messagesRef","database","ref","chatRoomId","messagesArray","setState","state","child","on","DataSnapshot","push","val","scrollRef","current","scrollIntoView","block","inline","length","map","v","i","me","user","clientId","_id","content","timestamp","format","componentDidMount","chatRoom","addMessagesListeners","id","componentDidUpdate","messagesEnd","componentWillUnmount","off","render","renderMessages","node","mapStateToProps","chat","currentChatRoom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n\n// style\n\nconst ChatContainer = styled.div`\n  height: 60vh;\n  margin: 30px;\n  overflow: auto;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 0 5px;\n  padding-top: 20px;\n  background: #eee;\n`;\n\nconst MessageWrapper = styled.div`\n  padding: 5px;\n  .message-timestamp {\n    font-size: 10px;\n    color: #999;\n    margin: 0 5px;\n  }\n  ${(props) =>\n    props.type === \"me\"\n      ? css`\n          text-align: right;\n          .message-content {\n            ${(props) =>\n              props.wordbreak === \"true\" &&\n              css`\n                display: inline-block;\n                width: 200px;\n                word-wrap: break-word;\n              `}\n\n            text-align: left;\n            padding: 5px;\n            border-radius: 4px;\n            background: #fee500;\n          }\n        `\n      : css`\n          .message-content {\n            ${(props) =>\n              props.wordbreak === \"true\" &&\n              css`\n                display: inline-block;\n                width: 200px;\n                word-wrap: break-word;\n              `}\n\n            text-align: left;\n            padding: 5px;\n            border-radius: 4px;\n            background: #fff;\n            color: #111;\n          }\n        `}\n`;\n\nexport class ChatBody extends Component {\n  // local state\n\n  messagesEnd = React.createRef();\n\n  state = {\n    messages: [],\n    messagesRef: firebase.database().ref(\"messages\"),\n  };\n\n  // life cycle method\n\n  componentDidMount() {\n    const { chatRoom } = this.props;\n\n    if (chatRoom) {\n      this.addMessagesListeners(chatRoom.id);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollIntoView({ block: \"end\", inline: \"nearest\" });\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.messagesRef.off();\n    this.messagesEnd = null;\n  }\n\n  // event listener\n\n  addMessagesListeners = (chatRoomId) => {\n    let messagesArray = [];\n    this.setState({ messages: [] });\n    this.state.messagesRef\n      .child(chatRoomId)\n      .on(\"child_added\", (DataSnapshot) => {\n        messagesArray.push(DataSnapshot.val());\n        this.setState({\n          messages: messagesArray,\n        });\n      });\n  };\n\n  // helper method\n\n  scrollToBottom = () => {\n    this.scrollRef.current.scrollIntoView({\n      block: \"end\",\n      inline: \"nearest\",\n    });\n  };\n\n  renderMessages = (messages) =>\n    messages.length > 0 &&\n    messages.map((v, i) => {\n      const { me } = this.props;\n      if (v.user.clientId === me._id) {\n        return (\n          <MessageWrapper\n            type=\"me\"\n            key={v.timestamp}\n            wordbreak={v.content.length > 10 ? \"true\" : \"false\"}\n          >\n            <span className=\"message-timestamp\">\n              {moment(v.timestamp).format(\"MM/DD HH:mm\")}\n            </span>\n            <span className=\"message-content\">{v.content}</span>\n          </MessageWrapper>\n        );\n      } else {\n        return (\n          <MessageWrapper\n            key={v.timestamp}\n            type=\"opponent\"\n            wordbreak={v.content.length > 10 ? \"true\" : \"false\"}\n          >\n            <span className=\"message-content\">{v.content}</span>\n            <span className=\"message-timestamp\">\n              {moment(v.timestamp).format(\"MM/DD HH:mm\")}\n            </span>\n          </MessageWrapper>\n        );\n      }\n    });\n  render() {\n    const { messages } = this.state;\n    return (\n      <ChatContainer>\n        {this.renderMessages(messages)}\n        <div ref={(node) => (this.messagesEnd = node)} />\n      </ChatContainer>\n    );\n  }\n}\n\n// redux\n\nconst mapStateToProps = (state) => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom,\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);\n"]},"metadata":{},"sourceType":"module"}