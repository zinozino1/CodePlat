{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst ChatContainer = styled.div.withConfig({\n  displayName: \"ChatBody__ChatContainer\",\n  componentId: \"sc-1cur02d-0\"\n})([\"height:60vh;margin:30px;overflow:auto;border:1px solid #ddd;border-radius:4px;padding:0 5px;padding-top:20px;background:#eee;\"]);\nconst MessageWrapper = styled.div.withConfig({\n  displayName: \"ChatBody__MessageWrapper\",\n  componentId: \"sc-1cur02d-1\"\n})([\"padding:5px;.message-timestamp{font-size:10px;color:#999;margin:0 5px;}\", \"\"], props => props.type === \"me\" ? css([\"text-align:right;.message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fee500;}\"], props => props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"])) : css([\".message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fff;color:#111;}\"], props => props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"])));\nexport class ChatBody extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"messagesEnd\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"state\", {\n      messages: [],\n      messagesRef: firebase.database().ref(\"messages\")\n    });\n\n    _defineProperty(this, \"addMessagesListeners\", chatRoomId => {\n      let messagesArray = [];\n      this.setState({\n        messages: []\n      });\n      this.state.messagesRef.child(chatRoomId).on(\"child_added\", DataSnapshot => {\n        messagesArray.push(DataSnapshot.val());\n        this.setState({\n          messages: messagesArray\n        });\n      });\n    });\n\n    _defineProperty(this, \"scrollToBottom\", () => {\n      this.scrollRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(this, \"renderMessages\", messages => messages.length > 0 && messages.map((v, i) => {\n      const {\n        me\n      } = this.props;\n\n      if (v.user.clientId === me._id) {\n        return /*#__PURE__*/_jsxs(MessageWrapper, {\n          type: \"me\",\n          wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            className: \"message-timestamp\",\n            children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n          }), /*#__PURE__*/_jsx(\"span\", {\n            className: \"message-content\",\n            children: v.content\n          })]\n        }, v.timestamp);\n      } else {\n        return /*#__PURE__*/_jsxs(MessageWrapper, {\n          type: \"opponent\",\n          wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            className: \"message-content\",\n            children: v.content\n          }), /*#__PURE__*/_jsx(\"span\", {\n            className: \"message-timestamp\",\n            children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n          })]\n        }, v.timestamp);\n      }\n    }));\n  }\n\n  // life cycle method\n  componentDidMount() {\n    const {\n      chatRoom\n    } = this.props;\n\n    if (chatRoom) {\n      this.addMessagesListeners(chatRoom.id);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.messagesRef.off();\n    this.messagesEnd = null;\n  } // event listener\n\n\n  render() {\n    const {\n      messages\n    } = this.state;\n    return /*#__PURE__*/_jsxs(ChatContainer, {\n      children: [this.renderMessages(messages), /*#__PURE__*/_jsx(\"div\", {\n        ref: node => this.messagesEnd = node\n      })]\n    });\n  }\n\n} // redux\n\nconst mapStateToProps = state => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);","map":null,"metadata":{},"sourceType":"module"}