{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(setUserSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(registerSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchUser);\n\nimport { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE, SET_USER_REQUEST, SET_USER_SUCCESS, SET_USER_FAILURE } from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 유저 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n// saga\n\nfunction setUserSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function setUserSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(setUser);\n\n        case 3:\n          res = _context.sent;\n\n          if (res.data.user) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 7;\n          return put({\n            type: SET_USER_SUCCESS,\n            user: null\n          });\n\n        case 7:\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put({\n            type: SET_USER_SUCCESS,\n            user: res.data.user\n          });\n\n        case 11:\n          _context.next = 18;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 18;\n          return put({\n            type: SET_USER_FAILURE\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}\n\nfunction loginSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(login, action.payload);\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            user: res.data.user\n          });\n\n        case 6:\n          _context2.next = 15;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          alert(\"이메일 인증을 완료해주세요.\");\n          axios.post(\"/api/mailAuth\", {\n            email: action.payload.email\n          }).then(function (res) {\n            alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n          })[\"catch\"](function (err) {\n            console.log(err);\n          });\n          _context2.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction logoutSaga(action) {\n  return _regeneratorRuntime.wrap(function logoutSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logout);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          window.location.href = \"http://localhost:3000\";\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // -> deprecated\n\n\nfunction registerSaga(action) {\n  return _regeneratorRuntime.wrap(function registerSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(register, action.data);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REGISTER_SUCCESS\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: REGISTER_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n} // watcher\n\n\nexport function watchUser() {\n  return _regeneratorRuntime.wrap(function watchUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(SET_USER_REQUEST, setUserSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeLatest(LOG_IN_REQUEST, loginSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeLatest(LOG_OUT_REQUEST, logoutSaga);\n\n        case 6:\n          _context5.next = 8;\n          return takeLatest(REGISTER_REQUEST, registerSaga);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/sagas/user.js"],"names":["setUserSaga","loginSaga","logoutSaga","registerSaga","watchUser","takeLatest","call","put","delay","throttle","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","SET_USER_REQUEST","SET_USER_SUCCESS","SET_USER_FAILURE","register","login","setUser","logout","axios","action","res","data","user","type","console","log","payload","alert","post","email","then","err","window","location","href"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  SET_USER_REQUEST,\n  SET_USER_SUCCESS,\n  SET_USER_FAILURE,\n} from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 유저 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n\n// saga\n\nfunction* setUserSaga(action) {\n  try {\n    const res = yield call(setUser);\n    if (!res.data.user) {\n      yield put({ type: SET_USER_SUCCESS, user: null });\n    } else {\n      yield put({ type: SET_USER_SUCCESS, user: res.data.user });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({ type: SET_USER_FAILURE });\n  }\n}\n\nfunction* loginSaga(action) {\n  try {\n    const res = yield call(login, action.payload);\n    yield put({ type: LOG_IN_SUCCESS, user: res.data.user });\n  } catch (error) {\n    console.log(error);\n    alert(\"이메일 인증을 완료해주세요.\");\n    axios\n      .post(`/api/mailAuth`, { email: action.payload.email })\n      .then((res) => {\n        alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    yield put({ type: LOG_IN_FAILURE });\n  }\n}\n\nfunction* logoutSaga(action) {\n  try {\n    yield call(logout);\n    yield put({ type: LOG_OUT_SUCCESS });\n    window.location.href = `http://localhost:3000`;\n  } catch (error) {\n    console.log(error);\n    yield put({ type: LOG_OUT_FAILURE });\n  }\n}\n\n// -> deprecated\nfunction* registerSaga(action) {\n  try {\n    yield call(register, action.data);\n    yield put({ type: REGISTER_SUCCESS });\n  } catch (error) {\n    yield put({ type: REGISTER_FAILURE });\n  }\n}\n\n// watcher\n\nexport function* watchUser() {\n  yield takeLatest(SET_USER_REQUEST, setUserSaga);\n  yield takeLatest(LOG_IN_REQUEST, loginSaga);\n  yield takeLatest(LOG_OUT_REQUEST, logoutSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n}\n"]},"metadata":{},"sourceType":"module"}