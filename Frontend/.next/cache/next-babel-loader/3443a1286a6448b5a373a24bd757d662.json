{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport { AppstoreOutlined, MailOutlined, UserOutlined } from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport wrapper from \"../store/configureStore\";\nimport { setUserRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../lib/api/client\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst {\n  SubMenu\n} = Menu;\nconst MenuWrapper = styled.div.withConfig({\n  displayName: \"mypage__MenuWrapper\",\n  componentId: \"sc-148fna2-0\"\n})([\"display:flex;.menu-bar{flex:1;width:200px;height:90vh;.ant-menu-item{&:hover{color:#111;}}.ant-menu-item-selected{background:#4f528a;color:#fff;&::after{border-right:none;}&:hover{color:#fff;}}.ant-menu-submenu-title{&:hover{color:#111;.ant-menu-submenu-arrow{color:#111;}}}}.menu-content{flex:4;}@media (max-width:768px){flex-direction:column;.menu-bar{height:100%;width:100%;}.menu-content{margin-bottom:3rem;}}\"]);\n\nclass mypage extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"state\", {\n      chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      chatRooms: [],\n      chatRoomsLoading: false,\n      firstLoad: true,\n      notifications: [],\n      currentMenu: \"profile\",\n      chatRoomKey: \"\"\n    });\n\n    _defineProperty(this, \"onChangeCurrentMenu\", e => {\n      if (e.key === \"profile\" || e.key == \"activity\") {\n        this.props.dispatch(setCurrentChatRoomAction(null));\n      }\n\n      this.setState({\n        currentMenu: e.key\n      });\n    });\n\n    _defineProperty(this, \"setChatRoomKey\", id => {\n      this.setState({\n        chatRoomKey: id\n      });\n    });\n\n    _defineProperty(this, \"onSetCurrentChatRoom\", chatRoom => {\n      this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n      this.clearNotifications(chatRoom.id);\n    });\n\n    _defineProperty(this, \"addChatRoomListener\", () => {\n      let chatRoomsArray = [];\n      this.state.chatRoomsRef.on(\"child_added\", DataSnapshot => {\n        let flag = false;\n        DataSnapshot.val().users.forEach((v, i) => {\n          if (v.nickname === this.props.me.nickname) {\n            flag = true;\n          }\n        });\n\n        if (flag) {\n          chatRoomsArray.push(DataSnapshot.val());\n          this.setState({\n            chatRooms: chatRoomsArray\n          });\n          this.setState({\n            chatRoomsLoading: true\n          });\n          this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n        }\n      });\n      this.setState({\n        chatRoomsLoading: false\n      });\n    });\n\n    _defineProperty(this, \"addNotificationListener\", (chatRoomId, chatRoomInfo) => {\n      this.state.messagesRef.child(chatRoomId).on(\"value\", DataSnapshot => {\n        this.handleNotifications(chatRoomId, this.props.chatRoom ? this.props.chatRoom.id : \"\", this.state.notifications, DataSnapshot, chatRoomInfo);\n      });\n    });\n\n    _defineProperty(this, \"handleNotifications\", async (chatRoomId, currentChatRoomId, notifications, DataSnapshot, chatRoomInfo) => {\n      let lastTotal = 0;\n      let index = notifications.findIndex(notification => notification.id === chatRoomId);\n\n      if (index === -1) {\n        let firebaseSnapshot = null;\n        await firebase.database().ref(`/chatRooms/${chatRoomId}/${this.props.me.nickname}`).once(\"value\").then(snapshot => {\n          firebaseSnapshot = snapshot.val();\n        });\n\n        if (firebaseSnapshot) {\n          notifications.push({\n            id: chatRoomId,\n            total: firebaseSnapshot.total,\n            lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n            count: firebaseSnapshot.count\n          });\n        } else {\n          notifications.push({\n            id: chatRoomId,\n            total: DataSnapshot.numChildren(),\n            lastKnownTotal: DataSnapshot.numChildren(),\n            count: 0\n          });\n        }\n      } else {\n        if (chatRoomId !== currentChatRoomId) {\n          lastTotal = notifications[index].lastKnownTotal;\n\n          if (DataSnapshot.numChildren() - lastTotal > 0) {\n            notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n          }\n        } else {\n          notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n        }\n\n        notifications[index].total = DataSnapshot.numChildren();\n      }\n\n      this.setState({\n        notifications\n      });\n    });\n\n    _defineProperty(this, \"clearNotifications\", async currentChatRoomId => {\n      let index = this.state.notifications.findIndex(notification => notification.id === currentChatRoomId);\n\n      if (index !== -1) {\n        let updatedNotifications = [...this.state.notifications];\n        updatedNotifications[index].lastKnownTotal = this.state.notifications[index].total;\n        updatedNotifications[index].count = 0;\n        this.setState({\n          notifications: updatedNotifications\n        });\n        await this.state.chatRoomsRef.child(currentChatRoomId).child(this.props.me.nickname).remove();\n      }\n    });\n\n    _defineProperty(this, \"getNotificationCount\", chatRoom => {\n      let count = 0;\n      this.state.notifications.forEach(notification => {\n        if (notification.id === chatRoom.id) {\n          count = notification.count;\n        }\n      });\n\n      if (count > 0) {\n        return count;\n      }\n    });\n\n    _defineProperty(this, \"setFirstChatRoom\", () => {\n      const firstChatRoom = this.state.chatRooms[0];\n\n      if (this.state.firstLoad && this.state.chatRooms.length > 0) {\n        this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n      }\n\n      this.setState({\n        firstLoad: false\n      });\n    });\n\n    _defineProperty(this, \"componentCleanup\", () => {\n      let lastKnown = [];\n      this.state.notifications.forEach((notification, i) => {\n        if (notification.total !== notification.lastKnownTotal) {\n          lastKnown.push({\n            chatRoomId: notification.id,\n            user: this.props.me.nickname,\n            total: notification.total,\n            lastKnownTotal: notification.lastKnownTotal,\n            count: notification.count\n          });\n        }\n      });\n\n      if (lastKnown) {\n        lastKnown.forEach(async (v, i) => {\n          await this.state.chatRoomsRef.child(v.chatRoomId).child(this.props.me.nickname).update(_objectSpread({}, v));\n        });\n      }\n    });\n\n    this.componentCleanup = this.componentCleanup.bind(this);\n  } // local state\n\n\n  async componentDidMount() {\n    await firebase.auth().signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n      firebaseMe = data.val();\n    });\n    await firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n      isInMypage: true\n    }));\n    window.addEventListener(\"beforeunload\", this.componentCleanup);\n    this.addChatRoomListener();\n  }\n\n  async componentWillUnmount() {\n    let firebaseMe = null;\n    let user = firebase.auth().currentUser;\n    await firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n      firebaseMe = data.val();\n    });\n    await firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n      isInMypage: false\n    }));\n    window.removeEventListener(\"beforeunload\", this.componentCleanup);\n    let lastKnown = [];\n    this.state.notifications.forEach((notification, i) => {\n      if (notification.total !== notification.lastKnownTotal) {\n        lastKnown.push({\n          chatRoomId: notification.id,\n          user: this.props.me.nickname,\n          total: notification.total,\n          lastKnownTotal: notification.lastKnownTotal,\n          count: notification.count\n        });\n      }\n    });\n\n    if (lastKnown) {\n      lastKnown.forEach(async (v, i) => {\n        await this.state.chatRoomsRef.child(v.chatRoomId).child(this.props.me.nickname).update(_objectSpread({}, v));\n      });\n    }\n\n    this.state.chatRoomsRef.off();\n    this.state.chatRooms.forEach(chatRoom => {\n      this.state.messagesRef.child(chatRoom.id).off();\n    });\n  }\n\n  render() {\n    const {\n      chatRooms\n    } = this.state;\n    const {\n      me\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Head, {\n        children: [/*#__PURE__*/_jsx(\"meta\", {\n          charSet: \"utf-8\"\n        }), /*#__PURE__*/_jsx(\"title\", {\n          children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n        })]\n      }), /*#__PURE__*/_jsx(MypageLayout, {\n        children: /*#__PURE__*/_jsxs(MenuWrapper, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"menu-bar\",\n            children: /*#__PURE__*/_jsxs(Menu, {\n              mode: \"inline\",\n              style: {\n                height: \"100%\"\n              },\n              defaultSelectedKeys: [\"profile\"],\n              onClick: this.onChangeCurrentMenu,\n              children: [/*#__PURE__*/_jsx(Menu.Item, {\n                icon: /*#__PURE__*/_jsx(UserOutlined, {}),\n                children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n              }, \"profile\"), /*#__PURE__*/_jsx(Menu.Item, {\n                icon: /*#__PURE__*/_jsx(AppstoreOutlined, {}),\n                children: \"\\uB0B4 \\uD65C\\uB3D9\"\n              }, \"activity\"), /*#__PURE__*/_jsx(SubMenu, {\n                icon: /*#__PURE__*/_jsx(MailOutlined, {}),\n                title: \"\\uCC44\\uD305\",\n                onClick: this.onChangeCurrentMenu,\n                children: /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [/*#__PURE__*/_jsx(\"span\", {\n                    style: {\n                      color: \"transparent\"\n                    },\n                    children: \"loading\"\n                  }), chatRooms && chatRooms.map((v, i) => {\n                    let flag = false;\n                    v.users.forEach((s, j) => {\n                      if (me && s.clientId === me._id) flag = true;\n                    });\n\n                    if (flag) {\n                      return /*#__PURE__*/_jsx(Menu.Item, {\n                        onClick: e => {\n                          this.setChatRoomKey(v.id);\n                          this.onSetCurrentChatRoom(v);\n                        },\n                        children: /*#__PURE__*/_jsxs(\"div\", {\n                          style: {\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                          },\n                          children: [/*#__PURE__*/_jsx(\"span\", {\n                            style: {},\n                            children: v.users.filter((s, j) => {\n                              if (me && s.nickname !== me.nickname) {\n                                return s;\n                              }\n                            })[0].nickname\n                          }), /*#__PURE__*/_jsx(\"span\", {\n                            children: /*#__PURE__*/_jsx(Badge, {\n                              count: this.getNotificationCount(v),\n                              style: {\n                                borderRadius: \"3px\",\n                                fontSize: \"9px\",\n                                padding: \"0 2px\",\n                                height: \"13px\",\n                                minWidth: \"13px\",\n                                lineHeight: \"13px\"\n                              }\n                            })\n                          })]\n                        })\n                      }, v.users.filter((s, j) => {\n                        if (me && s.nickname !== me.nickname) {\n                          return s;\n                        }\n                      })[0].nickname);\n                    }\n\n                    flag = false;\n                  })]\n                })\n              }, \"note\")]\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"menu-content\",\n            children: [this.state.currentMenu === \"profile\" && /*#__PURE__*/_jsx(EditProfile, {}), this.state.currentMenu === \"activity\" && /*#__PURE__*/_jsx(MyActivityTemplate, {}), this.state.currentMenu !== \"profile\" && this.state.currentMenu !== \"activity\" && /*#__PURE__*/_jsx(ChatContainer, {\n              chatRoomKey: this.state.chatRoomKey\n            })]\n          })]\n        })\n      })]\n    });\n  }\n\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  client.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    client.defaults.withCredentials = true;\n    client.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(setUserRequestAction());\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n}); // redux\n\nconst mapStateToProps = state => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(mypage);","map":null,"metadata":{},"sourceType":"module"}