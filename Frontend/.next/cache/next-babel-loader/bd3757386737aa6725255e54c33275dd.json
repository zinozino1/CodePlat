{"ast":null,"code":"import { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE, SET_USER_REQUEST, SET_USER_SUCCESS, SET_USER_FAILURE } from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 유저 관련 사가 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n// saga\n\nfunction* setUserSaga(action) {\n  try {\n    const res = yield call(setUser);\n\n    if (!res.data.user) {\n      yield put({\n        type: SET_USER_SUCCESS,\n        user: null\n      });\n    } else {\n      yield put({\n        type: SET_USER_SUCCESS,\n        user: res.data.user\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: SET_USER_FAILURE\n    });\n  }\n}\n\nfunction* loginSaga(action) {\n  try {\n    const res = yield call(login, action.payload);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      user: res.data.user\n    });\n  } catch (error) {\n    console.log(error);\n    alert(\"이메일 인증을 완료해주세요.\");\n    axios.post(`/api/mailAuth`, {\n      email: action.payload.email\n    }).then(res => {\n      alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n    }).catch(err => {\n      console.log(err);\n    });\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* logoutSaga(action) {\n  try {\n    yield call(logout);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n    window.location.href = `http://localhost:3000`;\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n} // -> deprecated\n\n\nfunction* registerSaga(action) {\n  try {\n    yield call(register, action.data);\n    yield put({\n      type: REGISTER_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: REGISTER_FAILURE\n    });\n  }\n} // watcher\n\n\nexport function* watchUser() {\n  yield takeLatest(SET_USER_REQUEST, setUserSaga);\n  yield takeLatest(LOG_IN_REQUEST, loginSaga);\n  yield takeLatest(LOG_OUT_REQUEST, logoutSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n}","map":null,"metadata":{},"sourceType":"module"}