{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Menu, Badge } from \"antd\";\nimport { AppstoreOutlined, MailOutlined, UserOutlined } from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport firebase from \"../firebase\";\nimport { setCurrentChatRoomAction } from \"../reducers/chat\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 - 프로필수정, 내 활동, 채팅 기능 구현.\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar SubMenu = Menu.SubMenu;\nvar MenuWrapper = styled.div.withConfig({\n  displayName: \"mypage__MenuWrapper\",\n  componentId: \"sc-148fna2-0\"\n})([\"display:flex;.menu-bar{flex:1;width:200px;height:90vh;.ant-menu-item{&:hover{color:#111;}}.ant-menu-item-selected{background:#4f528a;color:#fff;&::after{border-right:none;}&:hover{color:#fff;}}.ant-menu-submenu-title{&:hover{color:#111;.ant-menu-submenu-arrow{color:#111;}}}}.menu-content{flex:4;}@media (max-width:768px){flex-direction:column;.menu-bar{height:100%;width:100%;}.menu-content{margin-bottom:3rem;}}\"]);\n\nvar mypage = /*#__PURE__*/function (_Component) {\n  _inherits(mypage, _Component);\n\n  var _super = _createSuper(mypage);\n\n  function mypage(props, context) {\n    var _this;\n\n    _classCallCheck(this, mypage);\n\n    _this = _super.call(this, props, context);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      chatRoomsRef: firebase.database().ref(\"chatRooms\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      chatRooms: [],\n      chatRoomsLoading: false,\n      firstLoad: true,\n      notifications: [],\n      currentMenu: \"profile\",\n      chatRoomKey: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeCurrentMenu\", function (e) {\n      if (e.key === \"profile\" || e.key == \"activity\") {\n        _this.props.dispatch(setCurrentChatRoomAction(null));\n      }\n\n      _this.setState({\n        currentMenu: e.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setChatRoomKey\", function (id) {\n      _this.setState({\n        chatRoomKey: id\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetCurrentChatRoom\", function (chatRoom) {\n      _this.props.dispatch(setCurrentChatRoomAction(chatRoom));\n\n      _this.clearNotifications(chatRoom.id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addChatRoomListener\", function () {\n      var chatRoomsArray = [];\n\n      _this.state.chatRoomsRef.on(\"child_added\", function (DataSnapshot) {\n        var flag = false;\n        DataSnapshot.val().users.forEach(function (v, i) {\n          if (v.nickname === _this.props.me.nickname) {\n            flag = true;\n          }\n        });\n\n        if (flag) {\n          chatRoomsArray.push(DataSnapshot.val());\n\n          _this.setState({\n            chatRooms: chatRoomsArray\n          });\n\n          _this.setState({\n            chatRoomsLoading: true\n          });\n\n          _this.addNotificationListener(DataSnapshot.key, DataSnapshot.val());\n        }\n      });\n\n      _this.setState({\n        chatRoomsLoading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addNotificationListener\", function (chatRoomId, chatRoomInfo) {\n      _this.state.messagesRef.child(chatRoomId).on(\"value\", function (DataSnapshot) {\n        _this.handleNotifications(chatRoomId, _this.props.chatRoom ? _this.props.chatRoom.id : \"\", _this.state.notifications, DataSnapshot, chatRoomInfo);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNotifications\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chatRoomId, currentChatRoomId, notifications, DataSnapshot, chatRoomInfo) {\n        var lastTotal, index, firebaseSnapshot;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                lastTotal = 0;\n                index = notifications.findIndex(function (notification) {\n                  return notification.id === chatRoomId;\n                });\n\n                if (!(index === -1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                firebaseSnapshot = null;\n                _context.next = 6;\n                return firebase.database().ref(\"/chatRooms/\".concat(chatRoomId, \"/\").concat(_this.props.me.nickname)).once(\"value\").then(function (snapshot) {\n                  firebaseSnapshot = snapshot.val();\n                });\n\n              case 6:\n                if (firebaseSnapshot) {\n                  notifications.push({\n                    id: chatRoomId,\n                    total: firebaseSnapshot.total,\n                    lastKnownTotal: firebaseSnapshot.lastKnownTotal,\n                    count: firebaseSnapshot.count\n                  });\n                } else {\n                  notifications.push({\n                    id: chatRoomId,\n                    total: DataSnapshot.numChildren(),\n                    lastKnownTotal: DataSnapshot.numChildren(),\n                    count: 0\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 9:\n                if (chatRoomId !== currentChatRoomId) {\n                  lastTotal = notifications[index].lastKnownTotal;\n\n                  if (DataSnapshot.numChildren() - lastTotal > 0) {\n                    notifications[index].count = DataSnapshot.numChildren() - lastTotal;\n                  }\n                } else {\n                  notifications[index].lastKnownTotal = DataSnapshot.numChildren();\n                }\n\n                notifications[index].total = DataSnapshot.numChildren();\n\n              case 11:\n                _this.setState({\n                  notifications: notifications\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"clearNotifications\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentChatRoomId) {\n        var index, updatedNotifications;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                index = _this.state.notifications.findIndex(function (notification) {\n                  return notification.id === currentChatRoomId;\n                });\n\n                if (!(index !== -1)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                updatedNotifications = _toConsumableArray(_this.state.notifications);\n                updatedNotifications[index].lastKnownTotal = _this.state.notifications[index].total;\n                updatedNotifications[index].count = 0;\n\n                _this.setState({\n                  notifications: updatedNotifications\n                });\n\n                _context2.next = 8;\n                return _this.state.chatRoomsRef.child(currentChatRoomId).child(_this.props.me.nickname).remove();\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getNotificationCount\", function (chatRoom) {\n      var count = 0;\n\n      _this.state.notifications.forEach(function (notification) {\n        if (notification.id === chatRoom.id) {\n          count = notification.count;\n        }\n      });\n\n      if (count > 0) {\n        return count;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFirstChatRoom\", function () {\n      var firstChatRoom = _this.state.chatRooms[0];\n\n      if (_this.state.firstLoad && _this.state.chatRooms.length > 0) {\n        _this.props.dispatch(setCurrentChatRoomAction(firstChatRoom));\n      }\n\n      _this.setState({\n        firstLoad: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentCleanup\", function () {\n      var lastKnown = [];\n\n      _this.state.notifications.forEach(function (notification, i) {\n        if (notification.total !== notification.lastKnownTotal) {\n          lastKnown.push({\n            chatRoomId: notification.id,\n            user: _this.props.me.nickname,\n            total: notification.total,\n            lastKnownTotal: notification.lastKnownTotal,\n            count: notification.count\n          });\n        }\n      });\n\n      if (lastKnown) {\n        lastKnown.forEach( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(v, i) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _this.state.chatRoomsRef.child(v.chatRoomId).child(_this.props.me.nickname).update(_objectSpread({}, v));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function (_x7, _x8) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    });\n\n    _this.componentCleanup = _this.componentCleanup.bind(_assertThisInitialized(_this));\n    return _this;\n  } // local state\n\n\n  _createClass(mypage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var firebaseMe, user;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return firebase.auth().signInWithEmailAndPassword(this.props.me.email, this.props.me.email);\n\n              case 2:\n                firebaseMe = null;\n                user = firebase.auth().currentUser;\n                _context4.next = 6;\n                return firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n                  firebaseMe = data.val();\n                });\n\n              case 6:\n                _context4.next = 8;\n                return firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n                  isInMypage: true\n                }));\n\n              case 8:\n                window.addEventListener(\"beforeunload\", this.componentCleanup);\n                this.addChatRoomListener();\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function () {\n      var _componentWillUnmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this2 = this;\n\n        var firebaseMe, user, lastKnown;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                firebaseMe = null;\n                user = firebase.auth().currentUser;\n                _context6.next = 4;\n                return firebase.database().ref(\"users\").child(user.uid).once(\"value\", function (data) {\n                  firebaseMe = data.val();\n                });\n\n              case 4:\n                _context6.next = 6;\n                return firebase.database().ref(\"users\").child(user.uid).update(_objectSpread(_objectSpread({}, firebaseMe), {}, {\n                  isInMypage: false\n                }));\n\n              case 6:\n                window.removeEventListener(\"beforeunload\", this.componentCleanup);\n                lastKnown = [];\n                this.state.notifications.forEach(function (notification, i) {\n                  if (notification.total !== notification.lastKnownTotal) {\n                    lastKnown.push({\n                      chatRoomId: notification.id,\n                      user: _this2.props.me.nickname,\n                      total: notification.total,\n                      lastKnownTotal: notification.lastKnownTotal,\n                      count: notification.count\n                    });\n                  }\n                });\n\n                if (lastKnown) {\n                  lastKnown.forEach( /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(v, i) {\n                      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              _context5.next = 2;\n                              return _this2.state.chatRoomsRef.child(v.chatRoomId).child(_this2.props.me.nickname).update(_objectSpread({}, v));\n\n                            case 2:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    return function (_x9, _x10) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }());\n                }\n\n                this.state.chatRoomsRef.off();\n                this.state.chatRooms.forEach(function (chatRoom) {\n                  _this2.state.messagesRef.child(chatRoom.id).off();\n                });\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function componentWillUnmount() {\n        return _componentWillUnmount.apply(this, arguments);\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chatRooms = this.state.chatRooms;\n      var me = this.props.me;\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(Head, {\n          children: [/*#__PURE__*/_jsx(\"meta\", {\n            charSet: \"utf-8\"\n          }), /*#__PURE__*/_jsx(\"title\", {\n            children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n          })]\n        }), /*#__PURE__*/_jsx(MypageLayout, {\n          children: /*#__PURE__*/_jsxs(MenuWrapper, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"menu-bar\",\n              children: /*#__PURE__*/_jsxs(Menu, {\n                mode: \"inline\",\n                style: {\n                  height: \"100%\"\n                },\n                defaultSelectedKeys: [\"profile\"],\n                onClick: this.onChangeCurrentMenu,\n                children: [/*#__PURE__*/_jsx(Menu.Item, {\n                  icon: /*#__PURE__*/_jsx(UserOutlined, {}),\n                  children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n                }, \"profile\"), /*#__PURE__*/_jsx(Menu.Item, {\n                  icon: /*#__PURE__*/_jsx(AppstoreOutlined, {}),\n                  children: \"\\uB0B4 \\uD65C\\uB3D9\"\n                }, \"activity\"), /*#__PURE__*/_jsx(SubMenu, {\n                  icon: /*#__PURE__*/_jsx(MailOutlined, {}),\n                  title: \"\\uCC44\\uD305\",\n                  onClick: this.onChangeCurrentMenu,\n                  children: /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(\"span\", {\n                      style: {\n                        color: \"transparent\"\n                      },\n                      children: \"loading\"\n                    }), chatRooms && chatRooms.map(function (v, i) {\n                      var flag = false;\n                      v.users.forEach(function (s, j) {\n                        if (me && s.clientId === me._id) flag = true;\n                      });\n\n                      if (flag) {\n                        return /*#__PURE__*/_jsx(Menu.Item, {\n                          onClick: function onClick(e) {\n                            _this3.setChatRoomKey(v.id);\n\n                            _this3.onSetCurrentChatRoom(v);\n                          },\n                          children: /*#__PURE__*/_jsxs(\"div\", {\n                            style: {\n                              display: \"flex\",\n                              justifyContent: \"space-between\"\n                            },\n                            children: [/*#__PURE__*/_jsx(\"span\", {\n                              style: {},\n                              children: v.users.filter(function (s, j) {\n                                if (me && s.nickname !== me.nickname) {\n                                  return s;\n                                }\n                              })[0].nickname\n                            }), /*#__PURE__*/_jsx(\"span\", {\n                              children: /*#__PURE__*/_jsx(Badge, {\n                                count: _this3.getNotificationCount(v),\n                                style: {\n                                  borderRadius: \"3px\",\n                                  fontSize: \"9px\",\n                                  padding: \"0 2px\",\n                                  height: \"13px\",\n                                  minWidth: \"13px\",\n                                  lineHeight: \"13px\"\n                                }\n                              })\n                            })]\n                          })\n                        }, v.users.filter(function (s, j) {\n                          if (me && s.nickname !== me.nickname) {\n                            return s;\n                          }\n                        })[0].nickname);\n                      }\n\n                      flag = false;\n                    })]\n                  })\n                }, \"note\")]\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"menu-content\",\n              children: [this.state.currentMenu === \"profile\" && /*#__PURE__*/_jsx(EditProfile, {}), this.state.currentMenu === \"activity\" && /*#__PURE__*/_jsx(MyActivityTemplate, {}), this.state.currentMenu !== \"profile\" && this.state.currentMenu !== \"activity\" && /*#__PURE__*/_jsx(ChatContainer, {\n                chatRoomKey: this.state.chatRoomKey\n              })]\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return mypage;\n}(Component);\n\n// redux\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport var __N_SSP = true;\nexport default connect(mapStateToProps)(mypage);","map":null,"metadata":{},"sourceType":"module"}