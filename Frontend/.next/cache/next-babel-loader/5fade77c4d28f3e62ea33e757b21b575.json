{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatContainer = styled.div.withConfig({\n  displayName: \"ChatBody__ChatContainer\",\n  componentId: \"sc-1cur02d-0\"\n})([\"height:60vh;margin:30px;overflow:auto;border:1px solid #ddd;border-radius:4px;padding:0 5px;padding-top:20px;background:#eee;\"]);\nvar MessageWrapper = styled.div.withConfig({\n  displayName: \"ChatBody__MessageWrapper\",\n  componentId: \"sc-1cur02d-1\"\n})([\"padding:5px;.message-timestamp{font-size:10px;color:#999;margin:0 5px;}\", \"\"], function (props) {\n  return props.type === \"me\" ? css([\"text-align:right;.message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fee500;}\"], function (props) {\n    return props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"]);\n  }) : css([\".message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fff;color:#111;}\"], function (props) {\n    return props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"]);\n  });\n});\nexport var ChatBody = /*#__PURE__*/function (_Component) {\n  _inherits(ChatBody, _Component);\n\n  var _super = _createSuper(ChatBody);\n\n  function ChatBody() {\n    var _this;\n\n    _classCallCheck(this, ChatBody);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"messagesEnd\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      messages: [],\n      messagesRef: firebase.database().ref(\"messages\")\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addMessagesListeners\", function (chatRoomId) {\n      var messagesArray = [];\n\n      _this.setState({\n        messages: []\n      });\n\n      _this.state.messagesRef.child(chatRoomId).on(\"child_added\", function (DataSnapshot) {\n        messagesArray.push(DataSnapshot.val());\n\n        _this.setState({\n          messages: messagesArray\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollToBottom\", function () {\n      _this.scrollRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMessages\", function (messages) {\n      return messages.length > 0 && messages.map(function (v, i) {\n        var me = _this.props.me;\n\n        if (v.user.clientId === me._id) {\n          return /*#__PURE__*/_jsxs(MessageWrapper, {\n            type: \"me\",\n            wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: \"message-timestamp\",\n              children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: \"message-content\",\n              children: v.content\n            })]\n          }, v.timestamp);\n        } else {\n          return /*#__PURE__*/_jsxs(MessageWrapper, {\n            type: \"opponent\",\n            wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: \"message-content\",\n              children: v.content\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: \"message-timestamp\",\n              children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n            })]\n          }, v.timestamp);\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ChatBody, [{\n    key: \"componentDidMount\",\n    value: // life cycle method\n    function componentDidMount() {\n      var chatRoom = this.props.chatRoom;\n\n      if (chatRoom) {\n        this.addMessagesListeners(chatRoom.id);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.messagesEnd) {\n        this.messagesEnd.scrollIntoView({\n          block: \"end\",\n          inline: \"nearest\"\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.messagesRef.off();\n      this.messagesEnd = null;\n    } // event listener\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var messages = this.state.messages;\n      return /*#__PURE__*/_jsxs(ChatContainer, {\n        children: [this.renderMessages(messages), /*#__PURE__*/_jsx(\"div\", {\n          ref: function ref(node) {\n            return _this2.messagesEnd = node;\n          }\n        })]\n      });\n    }\n  }]);\n\n  return ChatBody;\n}(Component); // redux\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);","map":null,"metadata":{},"sourceType":"module"}