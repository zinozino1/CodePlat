{"ast":null,"code":"import React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { MessageOutlined, LikeOutlined, EyeOutlined, UserOutlined, TagsOutlined, LikeFilled, TagsFilled } from \"@ant-design/icons\";\nimport { Avatar, Popover, Button, Image } from \"antd\";\nimport ProfileModal from \"../../modal/ProfileModal\";\nimport { postScrapRequestAction, deletePostRequestAction, likePostRequestAction, unLikePostRequestAction, postUnScrapRequestAction } from \"../../../reducers/post\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SERVER_URL } from \"../../../lib/constant/constant\";\nimport Router from \"next/router\";\nimport { message } from \"antd\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포스트 뷰어 헤더 컴포넌트\n */\n// style\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst PostViewerHeaderWrapper = styled.div.withConfig({\n  displayName: \"PostViewerHeader__PostViewerHeaderWrapper\",\n  componentId: \"sc-1jcf24q-0\"\n})([\"justify-content:space-between;font-size:18px;font-weight:300;background:#fff;padding:20px 40px;.user-profile{flex:1;padding:5px 0;.user-nickname{margin:0 5px;}}.post-desc{font-size:12px;color:#888;flex:1;text-align:left;line-height:30px;display:flex;.post-summary{}.post-btns{text-align:right;flex:1;}.create-date{margin-right:10px;}.create-time{margin-right:10px;}.post-views,.post-comments,.post-forum-likes,.post-forum-scraps{margin:0 7px;}.scrap-btn,.delete-btn,.like-btn,.revise-btn{padding:5px;margin:0 5px;border:none;text-align:center;}}\"]);\n\nconst PostViewerHeader = ({\n  post,\n  contentType\n}) => {\n  // redux\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user); // local state\n\n  const {\n    0: like,\n    1: setLike\n  } = useState(post.likes.some((v, i) => {\n    if (me && v.userId === me._id) {\n      return true;\n    }\n  }) ? true : false);\n  const {\n    0: isScraped,\n    1: setIsScraped\n  } = useState(post.scraps.some((v, i) => {\n    if (me && v.userId === me._id) {\n      return true;\n    }\n  }) ? true : false); // helper method\n\n  const scrapDoneMessage = () => {\n    message.success({\n      content: \"스크랩 완료!\",\n      className: \"custom-class\",\n      style: {\n        marginTop: \"5vh\"\n      }\n    });\n  };\n\n  const unScrapDoneMessage = () => {\n    message.success({\n      content: \"스크랩 취소!\",\n      className: \"custom-class\",\n      style: {\n        marginTop: \"5vh\"\n      }\n    });\n  }; // event listener\n\n\n  const onToggleLike = useCallback(() => {\n    setLike(!like);\n\n    if (like) {\n      dispatch(unLikePostRequestAction({\n        user: me,\n        id: post.likes.find((v, i) => {\n          if (v.userId === me._id) {\n            return true;\n          }\n        })._id,\n        type: \"forum\",\n        postId: post._id\n      }));\n    } else {\n      dispatch(likePostRequestAction({\n        user: me,\n        id: post._id,\n        type: \"forum\"\n      }));\n    }\n  }, [like, me, post]);\n  const onScrap = useCallback(() => {\n    setIsScraped(!isScraped);\n\n    if (isScraped) {\n      unScrapDoneMessage();\n      dispatch(postUnScrapRequestAction({\n        postId: post._id,\n        type: contentType,\n        id: post.scraps.find((v, i) => {\n          if (v.userId === me._id) {\n            return true;\n          }\n        })._id,\n        user: me\n      }));\n    } else {\n      scrapDoneMessage();\n      dispatch(postScrapRequestAction({\n        id: post._id,\n        type: contentType,\n        user: me\n      }));\n    }\n  }, [post, isScraped, me]);\n  const onPostDelete = useCallback(deleteType => {\n    let confirmDelete = deleteType === \"recruitDone\" ? confirm(\"게시글이 삭제됩니다. 정말로 모집완료 처리하시겠습니까?\") : confirm(\"정말로 삭제하시겠습니까?\");\n\n    if (confirmDelete) {\n      dispatch(deletePostRequestAction(post._id));\n      Router.push(`/articles/${contentType}`);\n    } else {\n      return;\n    }\n  }, [post]);\n  const onPostRevise = useCallback(() => {\n    let confirmRevise = confirm(\"글을 수정하시겠습니까?\");\n\n    if (confirmRevise) {\n      Router.push(`/articles/edit/${post._id}`);\n    } else {}\n  }, [post]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(PostViewerHeaderWrapper, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"user-profile\",\n        children: [/*#__PURE__*/_jsxs(Popover, {\n          content: /*#__PURE__*/_jsx(\"div\", {\n            onClick: e => {\n              e.stopPropagation();\n            },\n            children: post.writer && /*#__PURE__*/_jsx(ProfileModal, {\n              writer: post.writer && post.writer\n            })\n          }),\n          children: [/*#__PURE__*/_jsx(Avatar, {\n            onClick: e => {\n              e.stopPropagation();\n            },\n            style: {\n              cursor: \"pointer\"\n            },\n            size: 32,\n            icon: /*#__PURE__*/_jsx(UserOutlined, {}),\n            src: post.writer && post.writer.avatarUrl && /*#__PURE__*/_jsx(Image, {\n              src: `${SERVER_URL}/${post.writer.avatarUrl}`,\n              width: 32,\n              height: 32\n            })\n          }), \" \"]\n        }), /*#__PURE__*/_jsx(\"span\", {\n          className: \"user-nickname\",\n          children: post.writer ? post.writer.nickname : \"탈퇴한 회원\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"post-desc\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"post-header-summary\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            className: \"create-date\",\n            children: `${new Date(post.createdAt).getFullYear()}.${new Date(post.createdAt).getMonth() + 1}.${new Date(post.createdAt).getDate()}`\n          }), /*#__PURE__*/_jsx(\"span\", {\n            className: \"create-time\",\n            children: `${new Date(post.createdAt).getHours()}:${new Date(post.createdAt).getMinutes() < 10 ? \"0\" + new Date(post.createdAt).getMinutes() : new Date(post.createdAt).getMinutes()}:${new Date(post.createdAt).getSeconds() < 10 ? \"0\" + new Date(post.createdAt).getSeconds() : new Date(post.createdAt).getSeconds()}`\n          }), /*#__PURE__*/_jsx(EyeOutlined, {}), /*#__PURE__*/_jsx(\"span\", {\n            className: \"post-views\",\n            children: post.views\n          }), /*#__PURE__*/_jsx(MessageOutlined, {}), /*#__PURE__*/_jsx(\"span\", {\n            className: \"post-comments\",\n            children: post.comments.length\n          }), /*#__PURE__*/_jsxs(_Fragment, {\n            children: [contentType === \"forum\" && /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(LikeOutlined, {}), /*#__PURE__*/_jsx(\"span\", {\n                className: \"post-forum-likes\",\n                children: post.likes.length\n              })]\n            }), /*#__PURE__*/_jsx(TagsOutlined, {}), /*#__PURE__*/_jsx(\"span\", {\n              className: \"post-forum-scraps\",\n              children: post.scraps.length\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"post-btns\",\n          children: [me && /*#__PURE__*/_jsx(_Fragment, {\n            children: /*#__PURE__*/_jsx(Button, {\n              className: \"scrap-btn\",\n              onClick: onScrap,\n              children: isScraped ? /*#__PURE__*/_jsx(TagsFilled, {\n                style: {\n                  marginRight: \"3px\",\n                  color: \"#1a91fe\"\n                }\n              }) : /*#__PURE__*/_jsx(TagsOutlined, {\n                style: {\n                  marginRight: \"3px\"\n                }\n              })\n            })\n          }), me && contentType == \"forum\" && /*#__PURE__*/_jsx(Button, {\n            type: \"ghost\",\n            className: \"like-btn\",\n            onClick: () => {\n              onToggleLike();\n            },\n            children: like ? /*#__PURE__*/_jsx(LikeFilled, {\n              style: {\n                marginRight: \"3px\",\n                color: \"#1a91fe\"\n              }\n            }) : /*#__PURE__*/_jsx(LikeOutlined, {\n              style: {\n                marginRight: \"3px\"\n              }\n            })\n          }), me && (contentType === \"study\" || contentType === \"project\") && post.writer && me._id === post.writer._id && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              type: \"ghost\",\n              className: \"revise-btn\",\n              onClick: () => {\n                onPostDelete(\"recruitDone\");\n              },\n              children: \"\\uBAA8\\uC9D1\\uC644\\uB8CC\"\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: \"/\"\n            })]\n          }), me && post.writer && me._id === post.writer._id && /*#__PURE__*/_jsx(_Fragment, {\n            children: /*#__PURE__*/_jsx(Button, {\n              type: \"ghost\",\n              className: \"revise-btn\",\n              onClick: () => {\n                onPostRevise();\n              },\n              children: \"\\uC218\\uC815\"\n            })\n          }), me && post.writer && me._id === post.writer._id && contentType === \"forum\" && /*#__PURE__*/_jsx(Button, {\n            type: \"ghost\",\n            style: {\n              color: \"tomato\"\n            },\n            className: \"delete-btn\",\n            onClick: () => {\n              onPostDelete(\"deletePost\");\n            },\n            children: \"\\uC0AD\\uC81C\"\n          })]\n        })]\n      })]\n    })\n  });\n};\n\nexport default PostViewerHeader;","map":null,"metadata":{},"sourceType":"module"}