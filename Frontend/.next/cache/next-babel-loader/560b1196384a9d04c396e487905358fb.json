{"ast":null,"code":"var _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/components/chat/ChatForm.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Input, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../firebase\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 폼 컴포넌트\n */\n// style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatFormWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__ChatFormWrapper\",\n  componentId: \"cirlrr-0\"\n})([\"margin:30px;display:flex;\"]);\nconst InputWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__InputWrapper\",\n  componentId: \"cirlrr-1\"\n})([\"flex:7;.chat-input{}\"]);\nconst ButtonWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__ButtonWrapper\",\n  componentId: \"cirlrr-2\"\n})([\"flex:1;.submit-btn{&:hover{color:#111;border:1px solid #313355;}}\"]);\n\nconst ChatForm = ({\n  chatRoomKey\n}) => {\n  // redux\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    currentChatRoom\n  } = useSelector(state => state.chat); // local state\n\n  const {\n    0: content,\n    1: setContent\n  } = useState(\"\");\n  const {\n    0: messagesRef,\n    1: setMessagesRef\n  } = useState(firebase.database().ref(\"messages\")); // helper method\n\n  const createMessage = () => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        clientId: currentChatRoom.users.filter((v, i) => {\n          if (v.clientId === me._id) {\n            return v;\n          }\n        })[0].clientId,\n        name: me.nickname\n      },\n      content\n    };\n    return message;\n  };\n\n  const handleEnterPress = e => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  }; // event listener\n\n\n  const onChangeContent = useCallback(e => {\n    setContent(e.target.value);\n  }, []);\n  const onSubmit = useCallback(async () => {\n    if (content === \"\") {\n      alert(\"메시지를 입력해주세요.\");\n      return;\n    }\n\n    try {\n      await messagesRef.child(currentChatRoom.id).push().set(createMessage());\n      setContent(\"\");\n      let opponentNickname = null;\n      await firebase.database().ref(`chatRooms`).child(currentChatRoom.id).once(\"value\", function (data) {\n        data.val().users.forEach((v, i) => {\n          if (v.nickname !== me.nickname) {\n            opponentNickname = v.nickname;\n          }\n        });\n      });\n      let opponentUid = null;\n      await firebase.database().ref(`users`).orderByChild(\"nickname\").equalTo(opponentNickname).once(\"value\", function (data) {\n        opponentUid = Object.keys(data.val())[0];\n      });\n      let opponentInfo = null;\n      await firebase.database().ref(\"users\").child(opponentUid).once(\"value\", function (data) {\n        opponentInfo = data.val();\n      });\n      let isExistOpponentLeave = null;\n      await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).once(\"value\", function (data) {\n        if (data.val()[opponentNickname]) {\n          isExistOpponentLeave = data.val()[opponentNickname];\n        }\n      });\n\n      if (!opponentInfo.isInMypage) {\n        if (isExistOpponentLeave) {\n          await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).child(opponentNickname).update(_objectSpread(_objectSpread({}, isExistOpponentLeave), {}, {\n            count: isExistOpponentLeave.count + 1,\n            total: isExistOpponentLeave.total + 1,\n            lastKnownTotal: isExistOpponentLeave.lastKnownTotal\n          }));\n        } else {\n          await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).child(opponentNickname).update({\n            chatRoomId: currentChatRoom.id,\n            user: opponentNickname,\n            total: 1,\n            lastKnownTotal: 0,\n            count: 1\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      alert(\"오류 발생\");\n      setContent(\"\");\n    }\n  }, [content, messagesRef, chatRoomKey]); // hooks\n\n  useEffect(() => {\n    return () => messagesRef.off();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChatFormWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        className: \"chat-input\",\n        onChange: onChangeContent,\n        value: content,\n        onKeyPress: handleEnterPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit-btn\",\n        style: {\n          width: \"100%\"\n        },\n        onClick: onSubmit,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ChatForm;","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/components/chat/ChatForm.jsx"],"names":["React","useState","useCallback","useEffect","styled","Input","Button","useSelector","firebase","ChatFormWrapper","div","InputWrapper","ButtonWrapper","ChatForm","chatRoomKey","me","state","user","currentChatRoom","chat","content","setContent","messagesRef","setMessagesRef","database","ref","createMessage","message","timestamp","ServerValue","TIMESTAMP","clientId","users","filter","v","i","_id","name","nickname","handleEnterPress","e","key","onSubmit","onChangeContent","target","value","alert","child","id","push","set","opponentNickname","once","data","val","forEach","opponentUid","orderByChild","equalTo","Object","keys","opponentInfo","isExistOpponentLeave","isInMypage","update","count","total","lastKnownTotal","chatRoomId","error","console","log","off","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Input, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../firebase\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 폼 컴포넌트\n */\n\n// style\n\nconst ChatFormWrapper = styled.div`\n  margin: 30px;\n  display: flex;\n`;\n\nconst InputWrapper = styled.div`\n  flex: 7;\n  .chat-input {\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  flex: 1;\n  .submit-btn {\n    &:hover {\n      color: #111;\n      border: 1px solid #313355;\n    }\n  }\n`;\n\nconst ChatForm = ({ chatRoomKey }) => {\n  // redux\n\n  const { me } = useSelector((state) => state.user);\n  const { currentChatRoom } = useSelector((state) => state.chat);\n\n  // local state\n\n  const [content, setContent] = useState(\"\");\n  const [messagesRef, setMessagesRef] = useState(\n    firebase.database().ref(\"messages\"),\n  );\n\n  // helper method\n\n  const createMessage = () => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        clientId: currentChatRoom.users.filter((v, i) => {\n          if (v.clientId === me._id) {\n            return v;\n          }\n        })[0].clientId,\n        name: me.nickname,\n      },\n      content,\n    };\n    return message;\n  };\n\n  const handleEnterPress = (e) => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  // event listener\n\n  const onChangeContent = useCallback((e) => {\n    setContent(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(async () => {\n    if (content === \"\") {\n      alert(\"메시지를 입력해주세요.\");\n      return;\n    }\n    try {\n      await messagesRef.child(currentChatRoom.id).push().set(createMessage());\n      setContent(\"\");\n      let opponentNickname = null;\n      await firebase\n        .database()\n        .ref(`chatRooms`)\n        .child(currentChatRoom.id)\n        .once(\"value\", function (data) {\n          data.val().users.forEach((v, i) => {\n            if (v.nickname !== me.nickname) {\n              opponentNickname = v.nickname;\n            }\n          });\n        });\n\n      let opponentUid = null;\n\n      await firebase\n        .database()\n        .ref(`users`)\n        .orderByChild(\"nickname\")\n        .equalTo(opponentNickname)\n        .once(\"value\", function (data) {\n          opponentUid = Object.keys(data.val())[0];\n        });\n\n      let opponentInfo = null;\n      await firebase\n        .database()\n        .ref(\"users\")\n        .child(opponentUid)\n        .once(\"value\", function (data) {\n          opponentInfo = data.val();\n        });\n\n      let isExistOpponentLeave = null;\n      await firebase\n        .database()\n        .ref(\"chatRooms\")\n        .child(currentChatRoom.id)\n        .once(\"value\", function (data) {\n          if (data.val()[opponentNickname]) {\n            isExistOpponentLeave = data.val()[opponentNickname];\n          }\n        });\n\n      if (!opponentInfo.isInMypage) {\n        if (isExistOpponentLeave) {\n          await firebase\n            .database()\n            .ref(\"chatRooms\")\n            .child(currentChatRoom.id)\n            .child(opponentNickname)\n            .update({\n              ...isExistOpponentLeave,\n              count: isExistOpponentLeave.count + 1,\n              total: isExistOpponentLeave.total + 1,\n              lastKnownTotal: isExistOpponentLeave.lastKnownTotal,\n            });\n        } else {\n          await firebase\n            .database()\n            .ref(\"chatRooms\")\n            .child(currentChatRoom.id)\n            .child(opponentNickname)\n            .update({\n              chatRoomId: currentChatRoom.id,\n              user: opponentNickname,\n              total: 1,\n              lastKnownTotal: 0,\n              count: 1,\n            });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      alert(\"오류 발생\");\n      setContent(\"\");\n    }\n  }, [content, messagesRef, chatRoomKey]);\n\n  // hooks\n\n  useEffect(() => {\n    return () => messagesRef.off();\n  }, []);\n\n  return (\n    <ChatFormWrapper>\n      <InputWrapper>\n        <Input\n          className=\"chat-input\"\n          onChange={onChangeContent}\n          value={content}\n          onKeyPress={handleEnterPress}\n        />\n      </InputWrapper>\n      <ButtonWrapper>\n        <Button\n          className=\"submit-btn\"\n          style={{ width: \"100%\" }}\n          onClick={onSubmit}\n        >\n          전송\n        </Button>\n      </ButtonWrapper>\n    </ChatFormWrapper>\n  );\n};\n\nexport default ChatForm;\n"]},"metadata":{},"sourceType":"module"}