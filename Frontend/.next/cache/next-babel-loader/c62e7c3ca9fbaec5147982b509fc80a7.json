{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions, createAction } from \"redux-actions\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포스트 관련 리덕스 설정파일\n * @note deprecated 된 것은 컴포넌트 혹은 페이지 내부에서 axios 직접 요청으로 대체\n */\n// initial state\n\nconst initialState = {\n  post: null,\n  temporalPostsLength: 0,\n  studyPosts: [],\n  projectPosts: [],\n  forumPosts: [],\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  mainLoadPostsLoading: false,\n  mainLoadPostsDone: false,\n  mainLoadPostsError: null,\n  writePostLoading: false,\n  writePostDone: false,\n  writePostError: null,\n  postScrapLoading: false,\n  postScrapDone: false,\n  postScrapError: null,\n  postUnScrapLoading: false,\n  postUnScrapDone: false,\n  postUnScrapError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deleteCommentLoading: false,\n  deleteCommentDone: false,\n  deleteCommentError: null,\n  loadForumPostsLoading: false,\n  loadForumPostsDone: false,\n  loadForumPostsError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  likeCommentLoading: false,\n  likeCommentDone: false,\n  likeCommentError: null,\n  unLikeCommentLoading: false,\n  unLikeCommentDone: false,\n  unLikeCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null\n}; // action type\n\nexport const INITIALIZE_POST = \"post/INITIALIZE_POST\";\nexport const INITIALIZE_POSTS = \"post/INITIALIZE_POSTS\";\nexport const LOAD_POST_REQUEST = \"post/LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"post/LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"post/LOAD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"post/LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"post/LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"post/LOAD_POSTS_FAILURE\";\nexport const MAIN_LOAD_POSTS_REQUEST = \"post/MAIN_LOAD_POSTS_REQUEST\";\nexport const MAIN_LOAD_POSTS_SUCCESS = \"post/MAIN_LOAD_POSTS_SUCCESS\";\nexport const MAIN_LOAD_POSTS_FAILURE = \"post/MAIN_LOAD_POSTS_FAILURE\";\nexport const WRITE_POST_REQUEST = \"post/WRITE_POST_REQUEST\";\nexport const WRITE_POST_SUCCESS = \"post/WRITE_POST_SUCCESS\";\nexport const WRITE_POST_FAILURE = \"post/WRITE_POST_FAILURE\";\nexport const POST_SCRAP_REQUEST = \"post/POST_SCRAP_REQUEST\";\nexport const POST_SCRAP_SUCCESS = \"post/POST_SCRAP_SUCCESS\";\nexport const POST_SCRAP_FAILURE = \"post/POST_SCRAP_FAILURE\";\nexport const POST_UNSCRAP_REQUEST = \"post/POST_UNSCRAP_REQUEST\";\nexport const POST_UNSCRAP_SUCCESS = \"post/POST_UNSCRAP_SUCCESS\";\nexport const POST_UNSCRAP_FAILURE = \"post/POST_UNSCRAP_FAILURE\"; // -> deprecated\n\nexport const ADD_COMMENT_REQUEST = \"post/ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"post/ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"post/ADD_COMMENT_FAILURE\"; // -> deprecated\n\nexport const DELETE_COMMENT_REQUEST = \"post/DELETE_COMMENT_REQUEST\";\nexport const DELETE_COMMENT_SUCCESS = \"post/DELETE_COMMENT_SUCCESS\";\nexport const DELETE_COMMENT_FAILURE = \"post/DELETE_COMMENT_FAILURE\";\nexport const LOAD_FORUM_POSTS_REQUEST = \"post/LOAD_FORUM_POSTS_REQUEST\";\nexport const LOAD_FORUM_POSTS_SUCCESS = \"post/LOAD_FORUM_POSTS_SUCCESS\";\nexport const LOAD_FORUM_POSTS_FAILURE = \"post/LOAD_FORUM_POSTS_FAILURE\";\nexport const DELETE_POST_REQUEST = \"post/DELETE_POST_REQUEST\";\nexport const DELETE_POST_SUCCESS = \"post/DELETE_POST_SUCCESS\";\nexport const DELETE_POST_FAILURE = \"post/DELETE_POST_FAILURE\";\nexport const LIKE_POST_REQUEST = \"post/LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"post/LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"post/LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"post/UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"post/UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"post/UNLIKE_POST_FAILURE\";\nexport const LIKE_COMMENT_REQUEST = \"post/LIKE_COMMENT_REQUEST\";\nexport const LIKE_COMMENT_SUCCESS = \"post/LIKE_COMMENT_SUCCESS\";\nexport const LIKE_COMMENT_FAILURE = \"post/LIKE_COMMENT_FAILURE\";\nexport const UNLIKE_COMMENT_REQUEST = \"post/UNLIKE_COMMENT_REQUEST\";\nexport const UNLIKE_COMMENT_SUCCESS = \"post/UNLIKE_COMMENT_SUCCESS\";\nexport const UNLIKE_COMMENT_FAILURE = \"post/UNLIKE_COMMENT_FAILURE\"; // action creator\n\nexport const initializePostAction = createAction(INITIALIZE_POST);\nexport const initializePostsAction = createAction(INITIALIZE_POSTS);\nexport const loadPostRequestAction = createAction(LOAD_POST_REQUEST, data => data);\nexport const loadPostsReqeustAction = createAction(LOAD_POSTS_REQUEST, data => data);\nexport const mainLoadPostsReqeustAction = createAction(MAIN_LOAD_POSTS_REQUEST);\nexport const writePostRequestAction = createAction(WRITE_POST_REQUEST, data => data);\nexport const postScrapRequestAction = createAction(POST_SCRAP_REQUEST, data => data);\nexport const postUnScrapRequestAction = createAction(POST_UNSCRAP_REQUEST, data => data); // -> deprecated\n\nexport const addCommentRequestAction = createAction(ADD_COMMENT_REQUEST, data => data); // -> deprecated\n\nexport const deleteCommentRequestAction = createAction(DELETE_COMMENT_REQUEST, data => data);\nexport const loadForumPostsRequestAction = createAction(LOAD_FORUM_POSTS_REQUEST, data => data);\nexport const deletePostRequestAction = createAction(DELETE_POST_REQUEST, data => data);\nexport const likePostRequestAction = createAction(LIKE_POST_REQUEST, data => data);\nexport const unLikePostRequestAction = createAction(UNLIKE_POST_REQUEST, data => data);\nexport const likeCommentRequestAction = createAction(LIKE_COMMENT_REQUEST, data => data);\nexport const unLikeCommentRequestAction = createAction(UNLIKE_COMMENT_REQUEST, data => data); // reducer\n\nconst postReducer = handleActions({\n  [INITIALIZE_POSTS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    studyPosts: [],\n    projectPosts: [],\n    forumPosts: []\n  }),\n  [INITIALIZE_POST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    post: null\n  }),\n  [LOAD_POST_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostLoading: true,\n    loadPostDone: false,\n    loadPostError: null\n  }),\n  [LOAD_POST_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostLoading: false,\n    loadPostDone: true,\n    loadPostError: null,\n    post: action.post\n  }),\n  [LOAD_POST_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostLoading: false,\n    loadPostDone: false,\n    loadPostError: action.error\n  }),\n  [LOAD_POSTS_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostsLoading: true,\n    loadPostsDone: false,\n    loadPostsError: null\n  }),\n  [LOAD_POSTS_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostsLoading: false,\n    loadPostsDone: true,\n    loadPostsError: null,\n    temporalPostsLength: action.temporalPostsLength,\n    [action.contentType + \"Posts\"]: state[action.contentType + \"Posts\"].concat(action.data)\n  }),\n  [LOAD_POSTS_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadPostsLoading: false,\n    loadPostsDone: false\n  }),\n  [MAIN_LOAD_POSTS_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    mainLoadPostsLoading: true,\n    mainLoadPostsDone: false,\n    mainLoadPostsError: null\n  }),\n  [MAIN_LOAD_POSTS_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    mainLoadPostsLoading: false,\n    mainLoadPostsDone: true,\n    mainLoadPostsError: null,\n    studyPosts: action.study,\n    projectPosts: action.project,\n    forumPosts: action.forum\n  }),\n  [MAIN_LOAD_POSTS_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    mainLoadPostsLoading: false,\n    mainLoadPostsDone: false,\n    mainLoadPostsError: action.error\n  }),\n  [WRITE_POST_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    writePostLoading: true,\n    writePostDone: false,\n    writePostError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    writePostLoading: false,\n    writePostDone: true,\n    writePostError: null\n  }),\n  [WRITE_POST_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    writePostLoading: false,\n    writePostDone: false,\n    writePostError: action.error\n  }),\n  [POST_SCRAP_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postScrapLoading: true,\n    postScrapDone: false,\n    postScrapError: null\n  }),\n  [POST_SCRAP_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postScrapLoading: false,\n    postScrapDone: true,\n    postScrapError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      scraps: [...state.post.scraps].concat(action.scrap)\n    })\n  }),\n  [POST_SCRAP_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postScrapLoading: false,\n    postScrapDone: false,\n    postScrapError: action.error\n  }),\n  [POST_UNSCRAP_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postUnScrapLoading: true,\n    postUnScrapDone: false,\n    postUnScrapError: null\n  }),\n  [POST_UNSCRAP_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postUnScrapLoading: false,\n    postUnScrapDone: true,\n    postUnScrapError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      scraps: [...state.post.scraps].filter((v, i) => {\n        if (v._id !== action.scrapId) {\n          return _objectSpread({}, v);\n        }\n      })\n    })\n  }),\n  [POST_UNSCRAP_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    postUnScrapLoading: false,\n    postUnScrapDone: false,\n    postUnScrapError: action.error\n  }),\n  // -> deprecated\n  [ADD_COMMENT_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    addCommentLoading: true,\n    addCommentDone: false,\n    addCommentError: null\n  }),\n  [ADD_COMMENT_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    addCommentLoading: false,\n    addCommentDone: true,\n    addCommentError: null,\n    post: action.post\n  }),\n  [ADD_COMMENT_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: action.error\n  }),\n  // -> deprecated\n  [DELETE_COMMENT_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deleteCommentLoading: true,\n    deleteCommentDone: false,\n    deleteCommentError: null\n  }),\n  [DELETE_COMMENT_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deleteCommentLoading: false,\n    deleteCommentDone: true,\n    deleteCommentError: null\n  }),\n  [DELETE_COMMENT_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deleteCommentLoading: false,\n    deleteCommentDone: false,\n    deleteCommentError: action.error\n  }),\n  [LOAD_FORUM_POSTS_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadForumPostsLoading: true,\n    loadForumPostsDone: false,\n    loadForumPostsError: null\n  }),\n  [LOAD_FORUM_POSTS_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadForumPostsLoading: false,\n    loadForumPostsDone: true,\n    loadForumPostsError: null,\n    temporalPostsLength: action.temporalPostsLength,\n    forumPosts: state.forumPosts.concat(action.forumPosts)\n  }),\n  [LOAD_FORUM_POSTS_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    loadForumPostsLoading: false,\n    loadForumPostsDone: false,\n    loadForumPostsError: action.error\n  }),\n  [DELETE_POST_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deletePostLoading: true,\n    deletePostDone: false,\n    deletePostError: null\n  }),\n  [DELETE_POST_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deletePostLoading: false,\n    deletePostDone: true,\n    deletePostError: null\n  }),\n  [DELETE_POST_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    deletePostLoading: false,\n    deletePostDone: false,\n    deletePostError: action.error\n  }),\n  [LIKE_POST_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likePostLoading: true,\n    likePostDone: false,\n    likePostError: null\n  }),\n  [LIKE_POST_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likePostLoading: false,\n    likePostDone: true,\n    likePostError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      likes: [...state.post.likes].concat(action.like)\n    })\n  }),\n  [LIKE_POST_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: action.error\n  }),\n  [UNLIKE_POST_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikePostLoading: true,\n    unLikePostDone: false,\n    unLikePostError: null\n  }),\n  [UNLIKE_POST_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikePostLoading: false,\n    unLikePostDone: true,\n    unLikePostError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      likes: [...state.post.likes].filter((v, i) => {\n        if (v._id !== action.likeId) {\n          return _objectSpread({}, v);\n        }\n      })\n    })\n  }),\n  [UNLIKE_POST_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikePostLoading: false,\n    unLikePostDone: false,\n    unLikePostError: action.error\n  }),\n  [LIKE_COMMENT_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likeCommentLoading: true,\n    likeCommentDone: false,\n    likeCommentError: null\n  }),\n  [LIKE_COMMENT_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likeCommentLoading: false,\n    likeCommentDone: true,\n    likeCommentError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      comments: [...state.post.comments].map((v, i) => {\n        return v._id === action.commentId ? _objectSpread(_objectSpread({}, v), {}, {\n          likes: [...v.likes].concat(action.like)\n        }) : _objectSpread({}, v);\n      })\n    })\n  }),\n  [LIKE_COMMENT_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    likeCommentLoading: false,\n    likeCommentDone: false,\n    likeCommentError: action.error\n  }),\n  [UNLIKE_COMMENT_REQUEST]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikeCommentLoading: true,\n    unLikeCommentDone: false,\n    unLikeCommentError: null\n  }),\n  [UNLIKE_COMMENT_SUCCESS]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikeCommentLoading: false,\n    unLikeCommentDone: true,\n    unLikeCommentError: null,\n    post: _objectSpread(_objectSpread({}, state.post), {}, {\n      comments: [...state.post.comments].map((v, i) => {\n        return v._id === action.commentId ? _objectSpread(_objectSpread({}, v), {}, {\n          likes: [...v.likes].filter((v, i) => {\n            if (v._id !== action.likeId) {\n              return _objectSpread({}, v);\n            }\n          })\n        }) : _objectSpread({}, v);\n      })\n    })\n  }),\n  [UNLIKE_COMMENT_FAILURE]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    unLikeCommentLoading: false,\n    unLikeCommentDone: false,\n    unLikeCommentError: action.error\n  })\n}, initialState);\nexport default postReducer;","map":null,"metadata":{},"sourceType":"module"}