{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/components/chat/ChatBody.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n// style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ChatContainer = styled.div.withConfig({\n  displayName: \"ChatBody__ChatContainer\",\n  componentId: \"sc-1cur02d-0\"\n})([\"height:60vh;margin:30px;overflow:auto;border:1px solid #ddd;border-radius:4px;padding:0 5px;padding-top:20px;background:#eee;\"]);\n_c = ChatContainer;\nvar MessageWrapper = styled.div.withConfig({\n  displayName: \"ChatBody__MessageWrapper\",\n  componentId: \"sc-1cur02d-1\"\n})([\"padding:5px;.message-timestamp{font-size:10px;color:#999;margin:0 5px;}\", \"\"], function (props) {\n  return props.type === \"me\" ? css([\"text-align:right;.message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fee500;}\"], function (props) {\n    return props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"]);\n  }) : css([\".message-content{\", \" text-align:left;padding:5px;border-radius:4px;background:#fff;color:#111;}\"], function (props) {\n    return props.wordbreak === \"true\" && css([\"display:inline-block;width:200px;word-wrap:break-word;\"]);\n  });\n});\n_c2 = MessageWrapper;\nexport var ChatBody = /*#__PURE__*/function (_Component) {\n  _inherits(ChatBody, _Component);\n\n  var _super = _createSuper(ChatBody);\n\n  function ChatBody() {\n    var _this;\n\n    _classCallCheck(this, ChatBody);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"messagesEnd\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      messages: [],\n      messagesRef: firebase.database().ref(\"messages\")\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addMessagesListeners\", function (chatRoomId) {\n      var messagesArray = [];\n\n      _this.setState({\n        messages: []\n      });\n\n      _this.state.messagesRef.child(chatRoomId).on(\"child_added\", function (DataSnapshot) {\n        messagesArray.push(DataSnapshot.val());\n\n        _this.setState({\n          messages: messagesArray\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollToBottom\", function () {\n      _this.scrollRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMessages\", function (messages) {\n      return messages.length > 0 && messages.map(function (v, i) {\n        var me = _this.props.me;\n\n        if (v.user.clientId === me._id) {\n          return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n            type: \"me\",\n            wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-timestamp\",\n              children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 13\n            }, _assertThisInitialized(_this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-content\",\n              children: v.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 13\n            }, _assertThisInitialized(_this))]\n          }, v.timestamp, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, _assertThisInitialized(_this));\n        } else {\n          return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n            type: \"opponent\",\n            wordbreak: v.content.length > 10 ? \"true\" : \"false\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-content\",\n              children: v.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 13\n            }, _assertThisInitialized(_this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-timestamp\",\n              children: moment(v.timestamp).format(\"MM/DD HH:mm\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 13\n            }, _assertThisInitialized(_this))]\n          }, v.timestamp, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, _assertThisInitialized(_this));\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ChatBody, [{\n    key: \"componentDidMount\",\n    value: // life cycle method\n    function componentDidMount() {\n      var chatRoom = this.props.chatRoom;\n\n      if (chatRoom) {\n        this.addMessagesListeners(chatRoom.id);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.messagesEnd) {\n        this.messagesEnd.scrollIntoView({\n          block: \"end\",\n          inline: \"nearest\"\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.messagesRef.off();\n      this.messagesEnd = null;\n    } // event listener\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var messages = this.state.messages;\n      return /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [this.renderMessages(messages), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: function ref(node) {\n            return _this2.messagesEnd = node;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return ChatBody;\n}(Component); // redux\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/components/chat/ChatBody.jsx"],"names":["React","Component","styled","css","firebase","moment","connect","ChatContainer","div","MessageWrapper","props","type","wordbreak","ChatBody","createRef","messages","messagesRef","database","ref","chatRoomId","messagesArray","setState","state","child","on","DataSnapshot","push","val","scrollRef","current","scrollIntoView","block","inline","length","map","v","i","me","user","clientId","_id","content","timestamp","format","chatRoom","addMessagesListeners","id","messagesEnd","off","renderMessages","node","mapStateToProps","chat","currentChatRoom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport firebase from \"../../firebase\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 마이페이지 채팅 바디 컴포넌트\n * @note 함수형 컴포넌트와 firebase realtime database가 충돌하는 이슈가 있어 클래스형으로 리팩토링\n */\n\n// style\n\nconst ChatContainer = styled.div`\n  height: 60vh;\n  margin: 30px;\n  overflow: auto;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 0 5px;\n  padding-top: 20px;\n  background: #eee;\n`;\n\nconst MessageWrapper = styled.div`\n  padding: 5px;\n  .message-timestamp {\n    font-size: 10px;\n    color: #999;\n    margin: 0 5px;\n  }\n  ${(props) =>\n    props.type === \"me\"\n      ? css`\n          text-align: right;\n          .message-content {\n            ${(props) =>\n              props.wordbreak === \"true\" &&\n              css`\n                display: inline-block;\n                width: 200px;\n                word-wrap: break-word;\n              `}\n\n            text-align: left;\n            padding: 5px;\n            border-radius: 4px;\n            background: #fee500;\n          }\n        `\n      : css`\n          .message-content {\n            ${(props) =>\n              props.wordbreak === \"true\" &&\n              css`\n                display: inline-block;\n                width: 200px;\n                word-wrap: break-word;\n              `}\n\n            text-align: left;\n            padding: 5px;\n            border-radius: 4px;\n            background: #fff;\n            color: #111;\n          }\n        `}\n`;\n\nexport class ChatBody extends Component {\n  // local state\n\n  messagesEnd = React.createRef();\n\n  state = {\n    messages: [],\n    messagesRef: firebase.database().ref(\"messages\"),\n  };\n\n  // life cycle method\n\n  componentDidMount() {\n    const { chatRoom } = this.props;\n\n    if (chatRoom) {\n      this.addMessagesListeners(chatRoom.id);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollIntoView({ block: \"end\", inline: \"nearest\" });\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.messagesRef.off();\n    this.messagesEnd = null;\n  }\n\n  // event listener\n\n  addMessagesListeners = (chatRoomId) => {\n    let messagesArray = [];\n    this.setState({ messages: [] });\n    this.state.messagesRef\n      .child(chatRoomId)\n      .on(\"child_added\", (DataSnapshot) => {\n        messagesArray.push(DataSnapshot.val());\n        this.setState({\n          messages: messagesArray,\n        });\n      });\n  };\n\n  // helper method\n\n  scrollToBottom = () => {\n    this.scrollRef.current.scrollIntoView({\n      block: \"end\",\n      inline: \"nearest\",\n    });\n  };\n\n  renderMessages = (messages) =>\n    messages.length > 0 &&\n    messages.map((v, i) => {\n      const { me } = this.props;\n      if (v.user.clientId === me._id) {\n        return (\n          <MessageWrapper\n            type=\"me\"\n            key={v.timestamp}\n            wordbreak={v.content.length > 10 ? \"true\" : \"false\"}\n          >\n            <span className=\"message-timestamp\">\n              {moment(v.timestamp).format(\"MM/DD HH:mm\")}\n            </span>\n            <span className=\"message-content\">{v.content}</span>\n          </MessageWrapper>\n        );\n      } else {\n        return (\n          <MessageWrapper\n            key={v.timestamp}\n            type=\"opponent\"\n            wordbreak={v.content.length > 10 ? \"true\" : \"false\"}\n          >\n            <span className=\"message-content\">{v.content}</span>\n            <span className=\"message-timestamp\">\n              {moment(v.timestamp).format(\"MM/DD HH:mm\")}\n            </span>\n          </MessageWrapper>\n        );\n      }\n    });\n  render() {\n    const { messages } = this.state;\n    return (\n      <ChatContainer>\n        {this.renderMessages(messages)}\n        <div ref={(node) => (this.messagesEnd = node)} />\n      </ChatContainer>\n    );\n  }\n}\n\n// redux\n\nconst mapStateToProps = (state) => {\n  return {\n    me: state.user.me,\n    chatRoom: state.chat.currentChatRoom,\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBody);\n"]},"metadata":{},"sourceType":"module"}