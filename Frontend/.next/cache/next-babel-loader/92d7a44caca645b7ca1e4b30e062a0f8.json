{"ast":null,"code":"var _jsxFileName = \"/Users/jinho/Project/ProjectFrontend/pages/articles/forum/[id].jsx\";\nimport React, { useEffect } from \"react\";\nimport PostViewerLayout from \"../../../components/layout/PostViewerLayout\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { loadPostRequestAction, initializePostAction } from \"../../../reducers/post\";\nimport { withRouter } from \"next/router\";\nimport PostViewer from \"../../../components/common/contents/PostViewer\";\nimport Head from \"next/head\";\nimport wrapper from \"../../../store/configureStore\";\nimport { setUserRequestAction } from \"../../../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../../../lib/api/client\";\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포럼 포스트 뷰어 페이지\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ForumDetail = ({\n  router\n}) => {\n  // redux\n  const dispatch = useDispatch();\n  const {\n    post\n  } = useSelector(state => state.post); // hooks\n\n  useEffect(() => {\n    return () => {\n      dispatch(initializePostAction());\n    };\n  }, [router]);\n  if (!post) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\\uD3EC\\uB7FC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostViewerLayout, {\n      contentType: \"forum\",\n      children: post && /*#__PURE__*/_jsxDEV(PostViewer, {\n        post: post,\n        contentType: \"forum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  client.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    client.defaults.withCredentials = true;\n    client.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(setUserRequestAction());\n  context.store.dispatch(loadPostRequestAction({\n    postId: context.params.id\n  }));\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default withRouter(ForumDetail);","map":{"version":3,"sources":["/Users/jinho/Project/ProjectFrontend/pages/articles/forum/[id].jsx"],"names":["React","useEffect","PostViewerLayout","useSelector","useDispatch","loadPostRequestAction","initializePostAction","withRouter","PostViewer","Head","wrapper","setUserRequestAction","END","client","ForumDetail","router","dispatch","post","state","getServerSideProps","context","cookie","req","headers","defaults","Cookie","withCredentials","store","postId","params","id","sagaTask","toPromise"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,qBADF,EAEEC,oBAFF,QAGO,wBAHP;AAIA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,UAAP,MAAuB,gDAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAClC;AAEA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAWd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAA5B,CAJkC,CAMlC;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXe,MAAAA,QAAQ,CAACV,oBAAoB,EAArB,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,CAACS,MAAD,CAJM,CAAT;AAMA,MAAI,CAACE,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAM,QAAA,OAAO,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,gBAAD;AAAkB,MAAA,WAAW,EAAC,OAA9B;AAAA,gBACGA,IAAI,iBAAI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEA,IAAlB;AAAwB,QAAA,WAAW,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA;AADX;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAWD,CA3BD;;AA6BA,OAAO,MAAME,kBAAkB,GAAGT,OAAO,CAACS,kBAAR,CAChC,MAAOC,OAAP,IAAmB;AACjB,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAR,EAAAA,MAAM,CAACW,QAAP,CAAgBD,OAAhB,CAAwBE,MAAxB,GAAiC,EAAjC;;AACA,MAAIL,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AACzBR,IAAAA,MAAM,CAACW,QAAP,CAAgBE,eAAhB,GAAkC,IAAlC;AACAb,IAAAA,MAAM,CAACW,QAAP,CAAgBD,OAAhB,CAAwBE,MAAxB,GAAiCJ,MAAjC;AACD;;AACDD,EAAAA,OAAO,CAACO,KAAR,CAAcX,QAAd,CAAuBL,oBAAoB,EAA3C;AACAS,EAAAA,OAAO,CAACO,KAAR,CAAcX,QAAd,CACEX,qBAAqB,CAAC;AAAEuB,IAAAA,MAAM,EAAER,OAAO,CAACS,MAAR,CAAeC;AAAzB,GAAD,CADvB;AAGAV,EAAAA,OAAO,CAACO,KAAR,CAAcX,QAAd,CAAuBJ,GAAvB;AACA,QAAMQ,OAAO,CAACO,KAAR,CAAcI,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAd+B,CAA3B;AAiBP,eAAezB,UAAU,CAACO,WAAD,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\nimport PostViewerLayout from \"../../../components/layout/PostViewerLayout\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  loadPostRequestAction,\n  initializePostAction,\n} from \"../../../reducers/post\";\nimport { withRouter } from \"next/router\";\nimport PostViewer from \"../../../components/common/contents/PostViewer\";\nimport Head from \"next/head\";\nimport wrapper from \"../../../store/configureStore\";\nimport { setUserRequestAction } from \"../../../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../../../lib/api/client\";\n\n/**\n * @author 박진호\n * @version 1.0\n * @summary 포럼 포스트 뷰어 페이지\n */\n\nconst ForumDetail = ({ router }) => {\n  // redux\n\n  const dispatch = useDispatch();\n  const { post } = useSelector((state) => state.post);\n\n  // hooks\n\n  useEffect(() => {\n    return () => {\n      dispatch(initializePostAction());\n    };\n  }, [router]);\n\n  if (!post) return null;\n\n  return (\n    <>\n      <Head>\n        <meta charSet=\"utf-8\"></meta>\n        <title>포럼</title>\n      </Head>\n      <PostViewerLayout contentType=\"forum\">\n        {post && <PostViewer post={post} contentType=\"forum\" />}\n      </PostViewerLayout>\n    </>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    client.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      client.defaults.withCredentials = true;\n      client.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(setUserRequestAction());\n    context.store.dispatch(\n      loadPostRequestAction({ postId: context.params.id }),\n    );\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  },\n);\n\nexport default withRouter(ForumDetail);\n"]},"metadata":{},"sourceType":"module"}