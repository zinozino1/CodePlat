{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useCallback, useState, useEffect, useLayoutEffect } from \"react\";\nimport { Divider, Row, Col, Button, Form, Menu, Badge } from \"antd\";\nimport { AppstoreOutlined, MailOutlined, SettingOutlined, CalendarOutlined, LinkOutlined, UserOutlined } from \"@ant-design/icons\";\nimport MypageLayout from \"../components/layout/MypageLayout\";\nimport EditProfileForm from \"../components/mypage/EditProfileForm\";\nimport MyActivityTemplate from \"../components/mypage/MyActivityTemplate\";\nimport SkillFilterForm from \"../components/common/contents/SkillFilterForm\";\nimport styled from \"styled-components\";\nimport Head from \"next/head\";\nimport EditProfile from \"../components/mypage/EditProfile\";\nimport ChatContainer from \"../components/chat/ChatContainer\";\nimport wrapper from \"../store/configureStore\";\nimport { setUserRequestAction, setCurrentOpponentRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport client from \"../lib/api/client\";\nimport firebase from \"../firebase\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nimport { setCurrentChatRoomAction, initializeChatRoomAction } from \"../reducers/chat\";\nconst {\n  SubMenu\n} = Menu;\nconst MenuWrapper = styled.div.withConfig({\n  displayName: \"mypagedeprecated__MenuWrapper\",\n  componentId: \"sc-16sdllq-0\"\n})([\"display:flex;.menu-bar{flex:1;width:200px;height:90vh;}.menu-content{flex:4;}@media (max-width:768px){flex-direction:column;.menu-bar{height:100%;width:100%;}.menu-content{margin-bottom:3rem;}}\"]);\n\nconst mypage = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    currentChatRoom\n  } = useSelector(state => state.chat);\n  const dispatch = useDispatch();\n  const {\n    0: currentMenu,\n    1: setCurrentMenu\n  } = useState(\"profile\");\n  const onChangeCurrentMenu = useCallback(e => {\n    setCurrentMenu(e.key);\n  }, []);\n  const {\n    0: chatRoomsRef,\n    1: setChatRoomsRef\n  } = useState(firebase.database().ref(\"chatRooms\")); // const chatRoomsRef = firebase.database().ref(\"chatRooms\");\n\n  const {\n    0: chatRooms,\n    1: setChatRooms\n  } = useState([]); //const [myChatRooms, setMyChatRooms] = useState([]);\n\n  const {\n    0: chatRoomKey,\n    1: setChatRoomKey\n  } = useState(\"\");\n  const onSetCurrentChatRoom = useCallback(chatRoom => {\n    //console.log(data);\n    dispatch(setCurrentChatRoomAction(chatRoom)); //dispatch(setCurrentOpponentRequestAction(chatRoom));\n  }, []); // 알림\n\n  const notifications = [];\n  const {\n    0: messagesRef,\n    1: setMessagesRef\n  } = useState(firebase.database().ref(\"messages\"));\n\n  const handleNotification = (chatRoomId, //currentChatRoomId,\n  //notifications,\n  DataSnapShot) => {\n    // 방 하나 하나에 맞는 알림 정보 넣어주기\n    let lastTotal = 0; // 이미 notification state 안에 알림 정보가 들어있는 채팅방과 그렇지 않은 채팅방을 나눠주기\n\n    let index = notifications.findIndex(notification => notification.id === chatRoomId); // 해당 채팅방의 알림정보가 없을 떄 == 새로운 채팅방일 또는 첫렌더링일 경우\n\n    if (index === -1) {\n      console.log(\"첫시도 혹은새로운 채팅방\");\n      notifications.push({\n        id: chatRoomId,\n        // 채팅방 아이디\n        total: DataSnapShot.numChildren(),\n        // 해당 채팅방 전체 메시지 개수\n        lastKnownTotal: DataSnapShot.numChildren(),\n        // 이전에 확인한 전체 메시지 개수\n        count: 0 // 알림으로 사용될 숫자\n\n      }); // notifications.concat({\n      //   id: chatRoomId, // 채팅방 아이디\n      //   total: DataSnapShot.numChildren(), // 해당 채팅방 전체 메시지 개수\n      //   lastKnownTotal: DataSnapShot.numChildren(), // 이전에 확인한 전체 메시지 개수\n      //   count: 0, // 알림으로 사용될 숫자\n      // }),\n    } // 이미 있을 때\n    else {\n        console.log(\"이미 있음\");\n\n        if (chatRoomId !== currentChatRoom.id) {\n          lastTotal = notifications[index].lastKnownTotal;\n\n          if (DataSnapShot.numChildren() - lastTotal > 0) {\n            // setNotifications(\n            //   notifications.map((v, i) => {\n            //     if (i === index) {\n            //       return { ...v, count: DataSnapShot.numChildren() - lastTotal };\n            //     } else {\n            //       return { ...v };\n            //     }\n            //   }),\n            // );\n            notifications[index].count = DataSnapShot.numChildren() - lastTotal;\n          }\n        } // setNotifications(\n        //   notifications.map((v, i) => {\n        //     if (i === index) {\n        //       return { ...v, total: DataSnapShot.numChildren() };\n        //     } else {\n        //       return { ...v };\n        //     }\n        //   }),\n        // );\n\n\n        notifications[index].total = DataSnapShot.numChildren();\n      } //setNotifications([...notifications]);\n\n\n    console.log(notifications);\n  };\n\n  const addNotificationListener = chatRoomId => {\n    messagesRef.child(chatRoomId).on(\"value\", DataSnapShot => {\n      // console.log(\"채팅방 id\", chatRoomId);\n      console.log(\"채팅방 메시지 목록\", DataSnapShot.val());\n      console.log(\"현재 채팅방\", currentChatRoom); // if (currentChatRoom) {\n      //   // redux 현재 chat room\n      //   console.log(DataSnapShot.val());\n\n      handleNotification(chatRoomId, // chatroomref id\n      //currentChatRoom.id, // 현재 채팅방 id\n      //notifications, // 알림 정보 배열\n      DataSnapShot // 채팅방마다 들어있는 메시지들\n      ); //}\n    });\n  };\n\n  const getNotificationCount = chatRoom => {\n    let count = 0;\n    notifications.forEach((v, i) => {\n      if (v.id === chatRoom.id) {\n        count = v.count;\n      }\n    });\n    if (count > 0) return count;\n  }; // const setFirstChatRoom = (initialChatRooms) => {\n  //   // const firstChatRoom = initialChatRooms;\n  //   // console.log(firstChatRoom);\n  //   if (initialChatRooms.length > 0) {\n  //     dispatch(setCurrentChatRoomAction(initialChatRooms[0]));\n  //   }\n  // };\n\n\n  const addChatRoomListener = () => {\n    let chatRoomsArray = [];\n    chatRoomsRef.on(\"child_added\", DataSnapShot => {\n      chatRoomsArray.push(DataSnapShot.val());\n      console.log(DataSnapShot);\n      setChatRooms([...chatRoomsArray]); // setFirstChatRoom([...chatRoomsArray]);\n      //addNotificationListener(DataSnapShot.key);\n    });\n  };\n\n  useEffect(() => {\n    //chatRoomsRef.off()?\n    addChatRoomListener();\n    return () => {\n      initializeChatRoomAction();\n      chatRoomsRef.off(); // messagesRef.off();\n    };\n  }, []); // useEffect(() => {\n  //   console.log(notifications);\n  // }, [notifications]);\n\n  if (!me) return null;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"meta\", {\n        charSet: \"utf-8\"\n      }), /*#__PURE__*/_jsx(\"title\", {\n        children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\"\n      })]\n    }), /*#__PURE__*/_jsx(MypageLayout, {\n      children: /*#__PURE__*/_jsxs(MenuWrapper, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"menu-bar\",\n          children: /*#__PURE__*/_jsxs(Menu, {\n            mode: \"inline\",\n            style: {\n              height: \"100%\"\n            },\n            defaultSelectedKeys: [\"profile\"] //defaultOpenKeys={[\"sub1\"]}\n            ,\n            onClick: onChangeCurrentMenu,\n            children: [/*#__PURE__*/_jsx(Menu.Item, {\n              icon: /*#__PURE__*/_jsx(UserOutlined, {}),\n              children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n            }, \"profile\"), /*#__PURE__*/_jsx(Menu.Item, {\n              icon: /*#__PURE__*/_jsx(AppstoreOutlined, {}),\n              children: \"\\uB0B4 \\uD65C\\uB3D9\"\n            }, \"activity\"), /*#__PURE__*/_jsx(SubMenu, {\n              icon: /*#__PURE__*/_jsx(MailOutlined, {}),\n              title: \"\\uCABD\\uC9C0\\uD568\" //onTitleClick={loadChatRooms}\n              ,\n              children: /*#__PURE__*/_jsx(_Fragment, {\n                children: chatRooms.map((v, i) => {\n                  let flag = false;\n                  v.users.forEach((s, j) => {\n                    if (s.clientId === me._id) flag = true;\n                  });\n\n                  if (flag) {\n                    return /*#__PURE__*/_jsx(Menu.Item, {\n                      onClick: () => {\n                        setChatRoomKey(v.id);\n                        onSetCurrentChatRoom(v);\n                      },\n                      children: /*#__PURE__*/_jsxs(\"div\", {\n                        style: {\n                          display: \"flex\",\n                          justifyContent: \"space-between\"\n                        },\n                        children: [/*#__PURE__*/_jsx(\"span\", {\n                          style: {},\n                          children: v.users.filter((s, j) => {\n                            if (s.nickname !== me.nickname) {\n                              return s;\n                            }\n                          })[0].nickname\n                        }), /*#__PURE__*/_jsx(\"span\", {\n                          children: /*#__PURE__*/_jsx(Badge //count={1}\n                          , {\n                            count: getNotificationCount(v),\n                            style: {\n                              borderRadius: \"3px\",\n                              fontSize: \"9px\",\n                              padding: \"0 2px\",\n                              height: \"13px\",\n                              minWidth: \"13px\",\n                              lineHeight: \"13px\"\n                            }\n                          })\n                        })]\n                      })\n                    }, v.users.filter((s, j) => {\n                      if (s.nickname !== me.nickname) {\n                        return s;\n                      }\n                    })[0].nickname);\n                  }\n\n                  flag = false;\n                })\n              })\n            }, \"note\")]\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"menu-content\",\n          children: [currentMenu === \"profile\" && /*#__PURE__*/_jsx(EditProfile, {}), currentMenu === \"activity\" && /*#__PURE__*/_jsx(MyActivityTemplate, {}), currentMenu !== \"profile\" && currentMenu !== \"activity\" && /*#__PURE__*/_jsx(ChatContainer, {\n            chatRoomKey: chatRoomKey,\n            messages: true\n          })]\n        })]\n      })\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  client.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    //console.log(\"fuckcookie\", cookie);\n    client.defaults.withCredentials = true;\n    client.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(setUserRequestAction()); //context.store.dispatch(mainLoadPostsReqeustAction());\n  //context.store.dispatch(END);\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default mypage;","map":null,"metadata":{},"sourceType":"module"}