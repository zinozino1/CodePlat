{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(setUserSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(registerSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchUser);\n\nimport { takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE, SET_USER_REQUEST, SET_USER_SUCCESS, SET_USER_FAILURE } from \"../reducers/user\";\nimport { register, login, setUser, logout } from \"../lib/api/user\";\nimport axios from \"axios\"; // saga\n\nfunction setUserSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function setUserSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(setUser);\n\n        case 3:\n          res = _context.sent;\n\n          if (res.data.user) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 7;\n          return put({\n            type: SET_USER_SUCCESS,\n            user: null\n          });\n\n        case 7:\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put({\n            type: SET_USER_SUCCESS,\n            user: res.data.user\n          });\n\n        case 11:\n          _context.next = 18;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 18;\n          return put({\n            type: SET_USER_FAILURE\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}\n\nfunction loginSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(login, action.payload);\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            user: res.data.user\n          });\n\n        case 6:\n          _context2.next = 15;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          alert(\"이메일 인증을 완료해주세요.\");\n          axios.post(\"/api/mailAuth\", {\n            email: action.payload.email\n          }).then(function (res) {\n            alert(\"인증 링크가 포함된 이메일을 다시 보내드렸습니다. 확인해주세요!\");\n          })[\"catch\"](function (err) {\n            console.log(err);\n          });\n          _context2.next = 15;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction logoutSaga(action) {\n  return _regeneratorRuntime.wrap(function logoutSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logout);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          window.location.href = \"http://localhost:3000\";\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction registerSaga(action) {\n  return _regeneratorRuntime.wrap(function registerSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(register, action.data);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REGISTER_SUCCESS\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: REGISTER_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n} // watcher\n\n\nexport function watchUser() {\n  return _regeneratorRuntime.wrap(function watchUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(SET_USER_REQUEST, setUserSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeLatest(LOG_IN_REQUEST, loginSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeLatest(LOG_OUT_REQUEST, logoutSaga);\n\n        case 6:\n          _context5.next = 8;\n          return takeLatest(REGISTER_REQUEST, registerSaga);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":null,"metadata":{},"sourceType":"module"}