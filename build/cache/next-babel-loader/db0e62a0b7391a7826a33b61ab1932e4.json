{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { Form, Input, Select, Button, Divider, Upload, Steps, Result } from \"antd\";\nimport { UserOutlined, LockOutlined, UploadOutlined, SolutionOutlined, LoadingOutlined, SmileOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SocialTemplate from \"../common/auth/SocialTemplate\";\nimport useInput from \"../../hooks/useInput\";\nimport SkillFilterForm from \"../common/contents/SkillFilterForm\";\nimport { EmailRegex } from \"../../lib/constant/constant\";\nimport axios from \"axios\";\nimport { withRouter } from \"next/router\";\nimport { setUserRequestAction } from \"../../reducers/user\";\nimport FormData from \"form-data\";\nimport firebase from \"../../firebase\";\nimport shortid from \"shortid\";\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst RegisterFormWrapper = styled(Form).withConfig({\n  displayName: \"RegisterInputForm__RegisterFormWrapper\",\n  componentId: \"sn3xer-0\"\n})([\".register-btn{margin:20px 0;text-align:center;}.ant-divider{font-size:12px;margin:50px 0;}\"]);\nconst RegisterInputItemWrapper = styled(Form.Item).withConfig({\n  displayName: \"RegisterInputForm__RegisterInputItemWrapper\",\n  componentId: \"sn3xer-1\"\n})([\".ant-form-item-label{text-align:left;}.email-code{width:200px;}.ant-form-item-control{}\"]);\nconst PushBackButton = styled.span.withConfig({\n  displayName: \"RegisterInputForm__PushBackButton\",\n  componentId: \"sn3xer-2\"\n})([\"color:#888;font-size:12px;text-decoration:underline;cursor:pointer;\"]);\nconst StyledDivider = styled(Divider).withConfig({\n  displayName: \"RegisterInputForm__StyledDivider\",\n  componentId: \"sn3xer-3\"\n})([\"\"]);\nconst formData = new FormData();\n\nconst RegisterInputForm = ({\n  router\n}) => {\n  const {\n    skill\n  } = useSelector(state => state.skill);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const {\n    0: userId,\n    1: setUserId\n  } = useState(null);\n  const {\n    0: registerType,\n    1: setRegisterType\n  } = useState(null);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: socialType,\n    1: setSocialType\n  } = useState(\"\");\n  const {\n    0: formError,\n    1: setFormError\n  } = useState(true);\n  const {\n    0: nicknameExistError,\n    1: setNicknameExistError\n  } = useState(false);\n  const {\n    0: emailExistError,\n    1: setEmailExistError\n  } = useState(false);\n  const {\n    0: noneEmailUser,\n    1: setNoneEmailUser\n  } = useState(false);\n  const {\n    0: firebaseLoading,\n    1: setFirebaseLoading\n  } = useState(false);\n  const {\n    0: imageFile,\n    1: setImageFile\n  } = useState(null);\n  const {\n    0: nickname,\n    1: setNickname\n  } = useState(\"\");\n  const onChangeNickname = useCallback(e => {\n    setNickname(e.target.value);\n    setNicknameExistError(false);\n  }, []);\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const onChangeEmail = useCallback(e => {\n    setEmail(e.target.value);\n    setEmailExistError(false);\n  }, []);\n  const [confirmEmail, onChangeConfirmEmail] = useInput(\"\");\n  const [password, onChangePassword] = useInput(\"\");\n  const [confirmPassword, onChangeConfirmPassword] = useInput(\"\");\n  const [githubUrl, onChangeGithubUrl] = useInput(\"\");\n  const onClickEmailVerify = useCallback(() => {\n    setProgress(2);\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        enctype: \"multipart/form-data\"\n      }\n    }; // formData.append(\n    //   \"data\",\n    //   JSON.stringify({\n    //     type: \"local\",\n    //     id: userId,\n    //     techStack: skill,\n    //     githubUrl,\n    //     //avatar: imageFile,\n    //   }),\n    // );\n\n    formData.append(\"type\", \"local\");\n    formData.append(\"id\", userId);\n    formData.append(\"techStack\", JSON.stringify(skill));\n    formData.append(\"githubUrl\", githubUrl);\n    axios.post(\"/api/join/optionForm\", formData, config);\n  }, [userId, skill, githubUrl]); // 로컬 회원가입\n\n  const onClickLocalButton = useCallback(async () => {\n    if (formError) return;\n    await axios.post(\"/api/join\", {\n      email,\n      nickname,\n      password\n    }).then(async res => {\n      //console.log(res);\n      setUserId(res.data.userId);\n      setEmailExistError(false);\n      setNicknameExistError(false);\n      setRegisterType(\"local\");\n      setProgress(1); // firebase 유저 저장 of local회원가입\n\n      setFirebaseLoading(true);\n      let createdUser = await firebase.auth().createUserWithEmailAndPassword(email, email); //console.log(\"createdUser\", createdUser);\n\n      await createdUser.user.updateProfile({\n        displayName: nickname\n      });\n      await firebase.database().ref(\"users\").child(createdUser.user.uid).set({\n        nickname: createdUser.user.displayName,\n        email: createdUser.user.email,\n        type: \"local\",\n        isInMypage: false\n      }); // 회원가입 시 자동 로그인 -> 로컬은 자동로그인 안됨\n      // let SignedInUser = await firebase\n      //   .auth() // auth 서비스에 접근\n      //   .signInWithEmailAndPassword(email, email);\n      // //console.log(\"SignedInUser\", SignedInUser);\n      // setFirebaseLoading(false);\n    }).catch(err => {\n      if (err.response.data.error.name === \"UserExistsError\") {\n        setEmailExistError(true);\n      } else {\n        setNicknameExistError(true);\n      }\n    });\n  }, [formError, email, nickname, password]); // const onClickSocialButton = useCallback((e) => {\n  //   switch (e.target.innerText) {\n  //     case \"Naver\":\n  //       setSocialType(\"naver\");\n  //       break;\n  //     case \"Google\":\n  //       setSocialType(\"google\");\n  //       //axios.get(`/api/google`);\n  //       break;\n  //     case \"Github\":\n  //       setSocialType(\"github\");\n  //       //axios.get(`/api/github`);\n  //       break;\n  //     case \"Kakao\":\n  //       setSocialType(\"kakao\");\n  //       //axios.get(`/api/kakao`);\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   setRegisterType(\"social\");\n  //   // setProgress(1);\n  // }, []);\n\n  const onPushBack = useCallback(() => {\n    setRegisterType(null);\n    setProgress(0);\n  }, []);\n\n  const normFile = e => {\n    //console.log(\"norm file : \", e);\n    //console.log(e.fileList[0].originFileObj);\n    if (e.file.status === \"done\") {\n      formData.append(\"avatar\", e.fileList[0].originFileObj); // console.log(e.fileList[0].originFileObj);\n      // setImageFile(formData);\n      // console.log(\"done\");\n    } else if (e.file.status === \"removed\") {\n      formData.delete(\"avatar\"); // console.log(\"removed\");\n    }\n\n    let fileList = e.fileList;\n    fileList = fileList.slice(-1);\n\n    if (Array.isArray(e)) {\n      return e;\n    }\n\n    return e && fileList;\n  }; // social 회원가입 중복처리 필요\n\n\n  const onSocialRegisterSubmit = useCallback(e => {\n    if (nickname === \"\") {\n      alert(\"닉네임을 입력해주세요.\");\n      return;\n    }\n\n    if (noneEmailUser && email === \"\") {\n      console.log(noneEmailUser, email);\n      alert(\"이메일을 입력해주세요.\");\n      return;\n    }\n\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        enctype: \"multipart/form-data\" // withCredentials: true,\n\n      }\n    }; // formData.append(\n    //   \"data\",\n    //   JSON.stringify({\n    //     type: \"local\",\n    //     id: userId,\n    //     techStack: skill,\n    //     githubUrl,\n    //     //avatar: imageFile,\n    //   }),\n    // );\n\n    if (noneEmailUser) {\n      // github, kakao\n      formData.append(\"type\", \"email\");\n      formData.append(\"nickname\", nickname);\n      formData.append(\"techStack\", JSON.stringify(skill));\n      formData.append(\"githubUrl\", githubUrl);\n      formData.append(\"email\", email);\n      axios.post(\"/api/join/optionForm\", formData, config).then(async res => {\n        if (res.data.message === \"email is reduplication\") {\n          setEmailExistError(true);\n          formData.delete(\"type\");\n          formData.delete(\"nickname\");\n          formData.delete(\"techStack\");\n          formData.delete(\"githubUrl\");\n          formData.delete(\"email\");\n          return;\n        } else if (res.data.message === \"nickname is reduplication\") {\n          setNicknameExistError(true);\n          formData.delete(\"type\");\n          formData.delete(\"nickname\");\n          formData.delete(\"techStack\");\n          formData.delete(\"githubUrl\");\n          formData.delete(\"email\");\n          return;\n        } //dispatch(setUserRequestAction());\n\n\n        setNicknameExistError(false);\n        setEmailExistError(false);\n        setProgress(2);\n        let createdUser = await firebase.auth().createUserWithEmailAndPassword(email, email); //console.log(\"createdUser\", createdUser);\n\n        await createdUser.user.updateProfile({\n          displayName: nickname\n        });\n        await firebase.database().ref(\"users\").child(createdUser.user.uid).set({\n          nickname: createdUser.user.displayName,\n          type: \"social\",\n          isInMypage: false\n        }); // 임마도 자동로그인 x\n        // let SignedInUser = await firebase\n        //   .auth() // auth 서비스에 접근\n        //   .signInWithEmailAndPassword(email, anonymousPassword);\n        // //console.log(\"SignedInUser\", SignedInUser);\n        // setFirebaseLoading(false);\n      }).catch(error => {\n        console.log(error);\n        alert(\"에러 발생.\"); // if (error.response.data.message === \"email is reduplication\") {\n        //   setEmailExistError(true);\n        // } else {\n        //   setNicknameExistError(true);\n        // }\n\n        formData.delete(\"type\");\n        formData.delete(\"nickname\");\n        formData.delete(\"techStack\");\n        formData.delete(\"githubUrl\");\n        formData.delete(\"email\");\n      });\n    } else {\n      // google, naver\n      console.log(nickname, skill, githubUrl);\n      formData.append(\"type\", \"sns\");\n      formData.append(\"nickname\", nickname);\n      formData.append(\"techStack\", JSON.stringify(skill));\n      formData.append(\"githubUrl\", githubUrl);\n      axios.post(\"/api/join/optionForm\", formData, config).then(async res => {\n        if (res.data.message === \"nickname is reduplication\") {\n          setNicknameExistError(true);\n          formData.delete(\"type\");\n          formData.delete(\"nickname\");\n          formData.delete(\"techStack\");\n          formData.delete(\"githubUrl\");\n          return;\n        } //dispatch(setUserRequestAction());\n        //console.log(res.data);\n\n\n        setNicknameExistError(false);\n        setFirebaseLoading(true); // let anonymousPassword = shortid.generate();\n\n        let createdUser = await firebase.auth().createUserWithEmailAndPassword(res.data.user.email, res.data.user.email); //console.log(\"createdUser\", createdUser);\n\n        await createdUser.user.updateProfile({\n          displayName: nickname\n        }); // db 저장\n\n        await firebase.database().ref(\"users\").child(createdUser.user.uid).set({\n          email: createdUser.user.email,\n          nickname: createdUser.user.displayName,\n          type: \"social\",\n          isInMypage: false\n        }); // 파이어베이스 로그인\n\n        let SignedInUser = await firebase.auth() // auth 서비스에 접근\n        .signInWithEmailAndPassword(res.data.user.email, res.data.user.email); //console.log(\"SignedInUser\", SignedInUser);\n\n        setFirebaseLoading(false);\n        router.push(\"/\");\n      }).catch(error => {\n        alert(\"에러 발생.\");\n        console.log(error);\n        formData.delete(\"type\");\n        formData.delete(\"nickname\");\n        formData.delete(\"techStack\");\n        formData.delete(\"githubUrl\");\n      });\n    }\n  }, [nickname, skill, githubUrl]);\n  useEffect(() => {\n    if (nickname.length !== 0 && email.length !== 0 && confirmEmail.length !== 0 && password.length !== 0 && password.length >= 8 && confirmPassword.length !== 0 && password === confirmPassword && email === confirmEmail && email.match(EmailRegex)) {\n      setFormError(false);\n    } else {\n      setFormError(true);\n    }\n  }, [nickname, email, confirmEmail, password, confirmPassword]);\n  useEffect(() => {\n    if (router.query.type === \"sns\") {\n      setProgress(1);\n      setRegisterType(\"social\");\n    } else if (router.query.type === \"email\") {\n      setProgress(1);\n      setRegisterType(\"social\");\n      setNoneEmailUser(true); //setEmail(\"\");\n    }\n  }, [router]);\n  useEffect(() => {\n    console.log(email);\n  }, [email]);\n  return /*#__PURE__*/_jsxs(RegisterFormWrapper, _objectSpread(_objectSpread({}, formItemLayout), {}, {\n    form: form,\n    name: \"register\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"18px\",\n        fontWeight: \"bold\",\n        marginBottom: \"40px\"\n      },\n      children: /*#__PURE__*/_jsx(Link, {\n        href: \"/\",\n        children: /*#__PURE__*/_jsx(\"a\", {\n          style: {\n            color: \"#16172b\",\n            fontWeight: \"300\"\n          },\n          children: \"CodePlat\"\n        })\n      })\n    }), /*#__PURE__*/_jsxs(Steps, {\n      current: progress,\n      onChange: setProgress,\n      style: {\n        marginBottom: \"70px\"\n      },\n      children: [/*#__PURE__*/_jsx(Steps.Step, {\n        title: \"\\uD68C\\uC6D0\\uAC00\\uC785\",\n        icon: /*#__PURE__*/_jsx(UserOutlined, {}),\n        disabled: true\n      }), /*#__PURE__*/_jsx(Steps.Step, {\n        title: \"\\uCD94\\uAC00\\uC815\\uBCF4\",\n        icon: /*#__PURE__*/_jsx(SolutionOutlined, {}),\n        disabled: true\n      }), /*#__PURE__*/_jsx(Steps.Step, {\n        title: \"\\uC644\\uB8CC\",\n        icon: /*#__PURE__*/_jsx(SmileOutlined, {}),\n        disabled: true\n      })]\n    }), progress == 0 && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [nicknameExistError ? /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"nickname\",\n        label: \"\\uB2C9\\uB124\\uC784\",\n        validateStatus: \"error\",\n        help: \"\\uC774\\uBBF8 \\uC874\\uC7AC\\uD558\\uB294 \\uB2C9\\uB124\\uC784\\uC785\\uB2C8\\uB2E4.\",\n        rules: [{\n          required: true,\n          message: \"닉네임을 입력해주세요.\",\n          whitespace: true\n        }],\n        onChange: onChangeNickname,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"nickname\"\n        })\n      }) : /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"nickname\",\n        label: \"\\uB2C9\\uB124\\uC784\",\n        rules: [{\n          required: true,\n          message: \"닉네임을 입력해주세요.\",\n          whitespace: true\n        }],\n        onChange: onChangeNickname,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"nickname\"\n        })\n      }), emailExistError ? /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"email\",\n        label: \"\\uC774\\uBA54\\uC77C\",\n        validateStatus: \"error\",\n        help: \"\\uC774\\uBBF8 \\uC874\\uC7AC\\uD558\\uB294 \\uC774\\uBA54\\uC77C\\uC785\\uB2C8\\uB2E4.\",\n        rules: [{\n          type: \"email\",\n          message: \"이메일 형식으로 입력해 주세요.\"\n        }, {\n          required: true,\n          message: \"이메일을 입력해주세요.\"\n        }],\n        onChange: onChangeEmail,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"email\"\n        })\n      }) : /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"email\",\n        label: \"\\uC774\\uBA54\\uC77C\",\n        rules: [{\n          type: \"email\",\n          message: \"이메일 형식으로 입력해 주세요.\"\n        }, {\n          required: true,\n          message: \"이메일을 입력해주세요.\"\n        } // ({ getFieldValue }) => ({\n        //   validator(_, value) {\n        //     if (!emailExistError) {\n        //       return Promise.resolve();\n        //     } else {\n        //       return Promise.reject(\"이미 존재하는 이메일입니다.\");\n        //     }\n        //   },\n        // }),\n        ],\n        onChange: onChangeEmail,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"email\"\n        })\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"confirmEmail\",\n        label: \"\\uC774\\uBA54\\uC77C \\uD655\\uC778\",\n        rules: [// {\n        // type: 'email',\n        // message :''\n        //},\n        {\n          required: true,\n          message: \"이메일 확인을 입력해주세요.\"\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue(\"email\") === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(\"이메일이 일치하지 않습니다.\");\n          }\n\n        })],\n        onChange: onChangeConfirmEmail,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"confirm email\"\n        })\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"password\",\n        label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n        rules: [{\n          required: true,\n          message: \"비밀번호를 입력해주세요.\"\n        }, {\n          min: 8,\n          message: \"8자리 이상 비밀번호를 입력해주세요.\"\n        }],\n        hasFeedback: true,\n        onChange: onChangePassword,\n        children: /*#__PURE__*/_jsx(Input.Password, {\n          placeholder: \"password\"\n        })\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"confirmpassword\",\n        label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n        dependencies: [\"password\"],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: \"비밀번호를 입력해주세요.\"\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue(\"password\") === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n          }\n\n        })],\n        onChange: onChangeConfirmPassword,\n        children: /*#__PURE__*/_jsx(Input.Password, {\n          placeholder: \"confirm password\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"register-btn\",\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          onClick: onClickLocalButton,\n          style: {\n            background: \"#313355\",\n            color: \"#fff\",\n            border: \"1px solid #313355\"\n          },\n          children: \"\\uD655\\uC778\"\n        })\n      }), /*#__PURE__*/_jsx(StyledDivider, {\n        children: \"\\uC18C\\uC15C \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }), /*#__PURE__*/_jsx(SocialTemplate, {})]\n    }), progress == 1 && registerType == \"local\" && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(StyledDivider, {\n        children: \"\\uC120\\uD0DD \\uC785\\uB825 \\uC0AC\\uD56D\"\n      }), /*#__PURE__*/_jsx(SkillFilterForm, {\n        type: \"register\"\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"github\",\n        label: \"Github\",\n        hasFeedback: true,\n        onChange: onChangeGithubUrl,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"github \\uB2C9\\uB124\\uC784\"\n        })\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"avatar\",\n        label: \"\\uC0AC\\uC6A9\\uC790 \\uC774\\uBBF8\\uC9C0 \\uC124\\uC815\",\n        valuePropName: \"fileList\",\n        getValueFromEvent: normFile //onRemove={console.log(\"fuck\")}\n        //onChange={onChangeImageFile}\n        ,\n        children: /*#__PURE__*/_jsx(Upload, {\n          name: \"logo\",\n          listType: \"picture\",\n          accept: \"image/*\",\n          children: /*#__PURE__*/_jsx(Button, {\n            style: {\n              background: \"#313355\",\n              color: \"#fff\",\n              border: \"1px solid #313355\"\n            },\n            icon: /*#__PURE__*/_jsx(UploadOutlined, {}),\n            children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(StyledDivider, {}), /*#__PURE__*/_jsx(\"div\", {\n        className: \"email-btn\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\" // htmlType=\"submit\"\n          ,\n          onClick: onClickEmailVerify,\n          style: {\n            background: \"#313355\",\n            color: \"#fff\",\n            border: \"1px solid #313355\"\n          },\n          children: \"\\uC774\\uBA54\\uC77C \\uC778\\uC99D\"\n        })\n      }), /*#__PURE__*/_jsx(PushBackButton, {\n        onClick: onPushBack,\n        children: \"\\uB4A4\\uB85C\\uAC00\\uAE30\"\n      })]\n    }), progress == 1 && registerType == \"social\" && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [nicknameExistError ? /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n          name: \"nickname\",\n          label: \"\\uB2C9\\uB124\\uC784\",\n          validateStatus: \"error\",\n          help: \"\\uC774\\uBBF8 \\uC874\\uC7AC\\uD558\\uB294 \\uB2C9\\uB124\\uC784\\uC785\\uB2C8\\uB2E4.\",\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"닉네임을 입력해주세요.\",\n            whitespace: true\n          }],\n          onChange: onChangeNickname,\n          children: /*#__PURE__*/_jsx(Input, {\n            placeholder: \"nickname\"\n          })\n        })\n      }) : /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n          name: \"nickname\",\n          label: \"\\uB2C9\\uB124\\uC784\",\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"닉네임을 입력해주세요.\",\n            whitespace: true\n          }],\n          onChange: onChangeNickname,\n          children: /*#__PURE__*/_jsx(Input, {\n            placeholder: \"nickname\"\n          })\n        })\n      }), noneEmailUser && /*#__PURE__*/_jsx(_Fragment, {\n        children: emailExistError ? /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n          name: \"email\",\n          label: \"\\uC774\\uBA54\\uC77C\",\n          validateStatus: \"error\",\n          help: \"\\uC774\\uBBF8 \\uC874\\uC7AC\\uD558\\uB294 \\uC774\\uBA54\\uC77C\\uC785\\uB2C8\\uB2E4.\",\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"이메일을 입력해주세요.\",\n            whitespace: true\n          }],\n          children: /*#__PURE__*/_jsx(Input, {\n            placeholder: \"email\",\n            onChange: onChangeEmail\n          })\n        }) : /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n          name: \"email\",\n          label: \"\\uC774\\uBA54\\uC77C\",\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"이메일을 입력해주세요.\",\n            whitespace: true\n          }],\n          children: /*#__PURE__*/_jsx(Input, {\n            placeholder: \"email\",\n            onChange: onChangeEmail\n          })\n        })\n      }), /*#__PURE__*/_jsx(StyledDivider, {\n        children: \"\\uC120\\uD0DD \\uC785\\uB825 \\uC0AC\\uD56D\"\n      }), /*#__PURE__*/_jsx(SkillFilterForm, {\n        type: \"register\"\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"github\",\n        label: \"Github\",\n        hasFeedback: true,\n        onChange: onChangeGithubUrl,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"github \\uB2C9\\uB124\\uC784\"\n        })\n      }), /*#__PURE__*/_jsx(RegisterInputItemWrapper, {\n        name: \"avatar\",\n        label: \"\\uC0AC\\uC6A9\\uC790 \\uC774\\uBBF8\\uC9C0 \\uC124\\uC815\",\n        valuePropName: \"fileList\",\n        getValueFromEvent: normFile //onChange={onChangeImageFile}\n        ,\n        children: /*#__PURE__*/_jsx(Upload, {\n          name: \"logo\",\n          listType: \"picture\",\n          accept: \"image/*\",\n          children: /*#__PURE__*/_jsx(Button, {\n            icon: /*#__PURE__*/_jsx(UploadOutlined, {}),\n            children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(StyledDivider, {}), /*#__PURE__*/_jsx(\"div\", {\n        className: \"email-btn\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\" // htmlType=\"submit\"\n          ,\n          onClick: onSocialRegisterSubmit,\n          style: {\n            background: \"#313355\",\n            color: \"#fff\",\n            border: \"1px solid #313355\"\n          },\n          children: \"\\uAC00\\uC785\\uD558\\uAE30\"\n        })\n      }), firebaseLoading && /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"\\uC7A0\\uC2DC\\uB9CC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694...\"\n      }), /*#__PURE__*/_jsx(PushBackButton, {\n        onClick: onPushBack,\n        children: \"\\uB4A4\\uB85C\\uAC00\\uAE30\"\n      })]\n    }), progress == 2 && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(Result, {\n          status: \"success\",\n          title: `${email} 으로 인증 요청\n              메일을 보냈습니다. ` //subTitle=\"해당 이메일을 확인 하시고, 인증 확인 링크를 눌러 주시기 바랍니다.\"\n          // extra={[\n          //   <Button type=\"primary\" key=\"console\">\n          //     Go Console\n          //   </Button>,\n          //   <Button key=\"buy\">Buy Again</Button>,\n          // ]}\n\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          fontSize: \"16px\",\n          textAlign: \"center\"\n        },\n        children: [\"\\uD574\\uB2F9 \\uC774\\uBA54\\uC77C\\uC744 \\uD655\\uC778 \\uD558\\uC2DC\\uACE0, \\uC778\\uC99D \\uD655\\uC778 \\uB9C1\\uD06C\\uB97C \\uB20C\\uB7EC \\uC8FC\\uC2DC\\uAE30 \\uBC14\\uB78D\\uB2C8\\uB2E4.\", \" \"]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          fontSize: \"13px\",\n          textAlign: \"center\",\n          margin: \"20px 0\",\n          color: \"#888\"\n        },\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"*\"\n        }), \"\\uC774\\uBA54\\uC77C \\uC778\\uC99D\\uC774 \\uC644\\uB8CC \\uB418\\uC9C0 \\uC54A\\uC744 \\uACBD\\uC6B0 \\uC0AC\\uC774\\uD2B8 \\uC774\\uC6A9\\uC5D0 \\uC81C\\uD55C\\uC774 \\uC788\\uC744 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\", /*#__PURE__*/_jsx(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"*\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          fontSize: \"13px\",\n          textAlign: \"center\",\n          margin: \"20px 0\",\n          textDecoration: \"underline\"\n        },\n        children: /*#__PURE__*/_jsx(Link, {\n          href: \"/auth/login\",\n          children: /*#__PURE__*/_jsx(\"a\", {\n            style: {\n              color: \"#888\"\n            },\n            children: \"\\uB85C\\uADF8\\uC778\"\n          })\n        })\n      })]\n    })]\n  }));\n};\n\nexport default withRouter(RegisterInputForm);","map":null,"metadata":{},"sourceType":"module"}