{"ast":null,"code":"import { takeLatest, call, put, delay, throttle, takeEvery } from \"redux-saga/effects\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, MAIN_LOAD_POSTS_REQUEST, MAIN_LOAD_POSTS_SUCCESS, MAIN_LOAD_POSTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, WRITE_POST_REQUEST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE, POST_SCRAP_REQUEST, POST_SCRAP_SUCCESS, POST_SCRAP_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_FORUM_POSTS_REQUEST, LOAD_FORUM_POSTS_SUCCESS, LOAD_FORUM_POSTS_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LIKE_COMMENT_REQUEST, LIKE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, UNLIKE_COMMENT_REQUEST, UNLIKE_COMMENT_SUCCESS, UNLIKE_COMMENT_FAILURE, POST_UNSCRAP_SUCCESS, POST_UNSCRAP_FAILURE, POST_UNSCRAP_REQUEST // SEARCH_POSTS_REQUEST,\n// SEARCH_POSTS_SUCCESS,\n// SEARCH_POSTS_FAILURE,\n// FILTER_SEARCH_REQUEST,\n// FILTER_SEARCH_SUCCESS,\n// FILTER_SEARCH_FAILURE,\n} from \"../reducers/post\";\nimport { dummyPostCreator } from \"../lib/util/dummyCreator\";\nimport { mainLoadPosts, writePost, loadPost, loadPosts, loadForumPosts, addComment, deletePost, deleteComment, deleteCommentWithChildren, upLike, unLike, postScrap, postUnScrap // searchPosts,\n// filterSearch,\n} from \"../lib/api/post\"; // saga\n\nfunction* loadPostSaga(action) {\n  try {\n    const {\n      postId\n    } = action.payload;\n    const res = yield call(loadPost, postId); //console.log(res);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      post: res.data.post\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* loadPostsSaga(action) {\n  try {\n    const res = yield call(loadPosts, action.payload);\n    console.log(res);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      contentType: action.payload.type,\n      data: res.data.posts,\n      temporalPostsLength: res.data.postSize\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      contentType: action.payload //error: error.response,\n\n    });\n  }\n}\n\nfunction* mainLoadPostsSaga(action) {\n  try {\n    const res = yield call(mainLoadPosts); //console.log(res);\n\n    const {\n      study,\n      project,\n      forum\n    } = res.data.posts;\n    yield put({\n      type: MAIN_LOAD_POSTS_SUCCESS,\n      study,\n      project,\n      forum\n    }); //yield put({ type: MAIN_LOAD_POSTS_SUCCESS });\n    //yield delay(1000);\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: MAIN_LOAD_POSTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* writePostSaga(action) {\n  try {\n    // yield delay(1000);\n    const res = yield call(writePost, action.payload); // console.log(res);\n\n    yield put({\n      type: WRITE_POST_SUCCESS\n    });\n    const post = res.data.post;\n    window.location.href = `http://localhost:3000/articles/${post.type}/${post._id}`;\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: WRITE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* postScrapSaga(action) {\n  try {\n    //console.log(action.payload);\n    const res = yield call(postScrap, action.payload); //yield delay(1000);\n    //console.log(action.payload);\n\n    yield put({\n      type: POST_SCRAP_SUCCESS,\n      scrap: res.data.scrap\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_SCRAP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* postUnScrapSaga(action) {\n  try {\n    //console.log(action.payload);\n    yield call(postUnScrap, action.payload); //yield delay(1000);\n    //console.log(action.payload);\n\n    yield put({\n      type: POST_UNSCRAP_SUCCESS,\n      scrapId: action.payload.id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: POST_UNSCRAP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* addCommentSaga(action) {\n  try {\n    // action.payload = postID\n    //console.log(action.payload);\n    const res = yield call(addComment, action.payload); // console.log(res);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS //post: res.data.post,\n\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE //error: error.response.data,\n\n    });\n  }\n}\n\nfunction* loadForumPostsSaga(action) {\n  try {\n    const res = yield call(loadForumPosts, action.payload);\n    console.log(res);\n    yield put({\n      type: LOAD_FORUM_POSTS_SUCCESS,\n      forumPosts: res.data.posts,\n      temporalPostsLength: res.data.postSize\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_FORUM_POSTS_FAILURE,\n      error: error.response\n    });\n  }\n}\n\nfunction* deletePostSaga(action) {\n  try {\n    yield call(deletePost, action.payload);\n    yield put({\n      type: DELETE_POST_SUCCESS\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: DELETE_POST_FAILURE\n    });\n  }\n}\n\nfunction* deleteCommentSaga(action) {\n  try {\n    console.log(action.payload);\n\n    if (action.payload.type === \"children\") {\n      yield call(deleteCommentWithChildren, action.payload.id);\n    } else {\n      yield call(deleteComment, action.payload.id);\n    }\n\n    yield put({\n      type: DELETE_COMMENT_SUCCESS\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: DELETE_COMMENT_FAILURE\n    });\n  }\n}\n\nfunction* upLikePostSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      user: action.payload.user,\n      postId: action.payload.id,\n      like: res.data.like\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LIKE_POST_FAILURE\n    });\n  }\n}\n\nfunction* unLikePostSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      postId: action.payload.id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: UNLIKE_POST_FAILURE\n    });\n  }\n}\n\nfunction* upLikeCommentSaga(action) {\n  try {\n    const res = yield call(upLike, action.payload);\n    yield put({\n      type: LIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      commentId: action.payload.id,\n      like: res.data.like\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LIKE_COMMENT_FAILURE\n    });\n  }\n}\n\nfunction* unLikeCommentSaga(action) {\n  try {\n    yield call(unLike, action.payload);\n    yield put({\n      type: UNLIKE_COMMENT_SUCCESS,\n      user: action.payload.user,\n      likeId: action.payload.id,\n      commentId: action.payload.commentId\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: UNLIKE_COMMENT_FAILURE\n    });\n  }\n} // function* searchPostsSaga(action) {\n//   try {\n//     // action.payload = postID\n//     const res = yield call(searchPosts, action.payload);\n//     yield put({\n//       type: SEARCH_POSTS_SUCCESS,\n//       contentType: action.payload.type,\n//       posts: res.data.posts,\n//     });\n//   } catch (error) {\n//     console.log(error);\n//     yield put({\n//       type: SEARCH_POSTS_FAILURE,\n//       //error: error.response.data,\n//     });\n//   }\n// }\n// function* filterSearchSaga(action) {\n//   try {\n//     // action.payload = postID\n//     const res = yield call(filterSearch, action.payload);\n//     yield put({\n//       type: FILTER_SEARCH_SUCCESS,\n//       contentType: action.payload.type,\n//       posts: res.data.posts,\n//     });\n//   } catch (error) {\n//     console.log(error);\n//     yield put({\n//       type: FILTER_SEARCH_FAILURE,\n//       //error: error.response.data,\n//     });\n//   }\n// }\n// watcher\n\n\nexport function* watchPost() {\n  yield takeLatest(MAIN_LOAD_POSTS_REQUEST, mainLoadPostsSaga);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPostsSaga);\n  yield takeLatest(LOAD_POST_REQUEST, loadPostSaga);\n  yield throttle(2000, WRITE_POST_REQUEST, writePostSaga);\n  yield takeLatest(POST_SCRAP_REQUEST, postScrapSaga);\n  yield takeLatest(POST_UNSCRAP_REQUEST, postUnScrapSaga);\n  yield throttle(2000, ADD_COMMENT_REQUEST, addCommentSaga);\n  yield takeLatest(LOAD_FORUM_POSTS_REQUEST, loadForumPostsSaga);\n  yield takeLatest(DELETE_POST_REQUEST, deletePostSaga);\n  yield takeEvery(DELETE_COMMENT_REQUEST, deleteCommentSaga);\n  yield takeLatest(LIKE_POST_REQUEST, upLikePostSaga);\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePostSaga);\n  yield takeLatest(LIKE_COMMENT_REQUEST, upLikeCommentSaga);\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unLikeCommentSaga); //yield takeLatest(SEARCH_POSTS_REQUEST, searchPostsSaga);\n  // yield takeLatest(FILTER_SEARCH_REQUEST, filterSearchSaga);\n}","map":null,"metadata":{},"sourceType":"module"}