{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions, createAction } from \"redux-actions\"; // initial state\n\nconst initialState = {\n  skill: []\n}; // action type\n\nexport const INITIALIZE_SKILL = \"skill/INITIALIZE_SKILL\";\nexport const CHANGE_SKILL = \"skill/CHANGE_SKILL\"; // action creator\n\nexport const initializeSkillAction = createAction(INITIALIZE_SKILL);\nexport const skillChangeAction = createAction(CHANGE_SKILL, data => data); // reducer\n\nconst skillReducer = handleActions({\n  [INITIALIZE_SKILL]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    skill: []\n  }),\n  [CHANGE_SKILL]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    skill: action.payload\n  })\n}, initialState);\nexport default skillReducer;","map":null,"metadata":{},"sourceType":"module"}