{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useCallback } from \"react\";\nimport \"antd/dist/antd.css\";\nimport Head from \"next/head\";\nimport wrapper from \"../store/configureStore\";\nimport withReduxSaga from \"next-redux-saga\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserRequestAction } from \"../reducers/user\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport firebase from \"../firebase\";\n\nvar App = function App(_ref) {\n  var Component = _ref.Component;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me; // useEffect(() => {\n  //   dispatch(setUserRequestAction());\n  // }, []);\n  // useEffect(async () => {\n  //   if (me) {\n  //     await firebase.auth().signInWithEmailAndPassword(me.email, me.email);\n  //     console.log(\"firebase 로그인 성공\");\n  //   }\n  //   // firebase.auth().onAuthStateChanged((user) => {\n  //   //   console.log(\"firebase 새로 생성된 사용자 : \", user);\n  //   // });\n  //   let user = await firebase.auth().currentUser;\n  //   console.log(\"firebase 로그인된 user : \", user);\n  // }, [me]);\n\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"meta\", {\n        charSet: \"utf-8\"\n      }), /*#__PURE__*/_jsx(\"title\", {\n        children: \"CodePlat\"\n      })]\n    }), /*#__PURE__*/_jsx(Component, {})]\n  });\n};\n\n// export const getServerSideProps = wrapper.getServerSideProps(\n//   async (context) => {\n//     const cookie = context.req ? context.req.headers.cookie : \"\";\n//     axios.defaults.headers.Cookie = \"\";\n//     if (context.req && cookie) {\n//       axios.defaults.headers.Cookie = cookie;\n//     }\n//     context.store.dispatch(setUserRequestAction());\n//     context.store.dispatch(END);\n//     await context.store.sagaTask.toPromise();\n//   },\n// );\nexport default wrapper.withRedux(withReduxSaga(App));","map":null,"metadata":{},"sourceType":"module"}