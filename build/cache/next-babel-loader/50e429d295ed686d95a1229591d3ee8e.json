{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useCallback } from \"react\";\nimport { Tag, Input, Tooltip } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nconst TagBox = ({\n  tags,\n  setTags,\n  inputVisible,\n  setInputVisible,\n  inputValue,\n  setInputValue,\n  editInputIndex,\n  setEditInputIndex,\n  editInputValue,\n  setEditInputValue\n}) => {\n  const handleClose = useCallback(removedTag => {\n    setTags(tags.filter(tag => tag !== removedTag));\n  }, [tags]);\n  const showInput = useCallback(() => {\n    setInputVisible(true);\n  }, []);\n  const handleInputChange = useCallback(e => {\n    setInputValue(e.target.value);\n  }, []);\n  const handleInputConfirm = useCallback(() => {\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      setTags([...tags, inputValue]);\n    }\n\n    setInputVisible(false);\n    setInputValue(\"\");\n  }, [inputValue, tags]);\n  const handleEditInputChange = useCallback(e => {\n    setEditInputValue(e.target.value);\n  }, []);\n  const handleEditInputConfirm = useCallback(() => {\n    const newTags = [...tags];\n    newTags[editInputIndex] = editInputValue;\n    setTags(newTags);\n    setEditInputIndex(-1);\n    setEditInputValue(\"\");\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [tags.map((tag, index) => {\n      if (editInputIndex === index) {\n        return /*#__PURE__*/_jsx(Input, {\n          ref: saveEditInputRef,\n          size: \"small\",\n          className: \"tag-input\",\n          value: editInputValue,\n          onChange: handleEditInputChange,\n          onBlur: handleEditInputConfirm,\n          onPressEnter: handleEditInputConfirm\n        }, tag);\n      }\n\n      const isLongTag = tag.length > 20;\n\n      const tagElem = /*#__PURE__*/_jsx(Tag, {\n        className: \"edit-tag\",\n        closable: true,\n        onClose: () => handleClose(tag),\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: isLongTag ? `${tag.slice(0, 20)}...` : tag\n        })\n      }, tag);\n\n      return isLongTag ? /*#__PURE__*/_jsx(Tooltip, {\n        title: tag,\n        children: tagElem\n      }, tag) : tagElem;\n    }), inputVisible && /*#__PURE__*/_jsx(Input, {\n      type: \"text\",\n      size: \"small\",\n      className: \"tag-input\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onBlur: handleInputConfirm,\n      onPressEnter: handleInputConfirm,\n      style: {\n        width: \"78px\",\n        marginRight: \"8px\",\n        verticalAlign: \"top\"\n      }\n    }), !inputVisible && /*#__PURE__*/_jsxs(Tag, {\n      className: \"site-tag-plus\",\n      onClick: showInput,\n      children: [/*#__PURE__*/_jsx(PlusOutlined, {}), \" \\uD0DC\\uADF8\\uCD94\\uAC00\"]\n    })]\n  });\n};\n\nexport default TagBox;","map":null,"metadata":{},"sourceType":"module"}