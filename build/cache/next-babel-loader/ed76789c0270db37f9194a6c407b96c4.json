{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Input, Button } from \"antd\";\nimport { UpCircleOutlined } from \"@ant-design/icons\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../firebase\";\nconst ChatFormWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__ChatFormWrapper\",\n  componentId: \"cirlrr-0\"\n})([\"margin:30px;display:flex;\"]);\nconst InputWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__InputWrapper\",\n  componentId: \"cirlrr-1\"\n})([\"flex:7;.chat-input{}\"]);\nconst ButtonWrapper = styled.div.withConfig({\n  displayName: \"ChatForm__ButtonWrapper\",\n  componentId: \"cirlrr-2\"\n})([\"flex:1;.submit-btn{&:hover{color:#111;border:1px solid #313355;}}\"]);\n\nconst ChatForm = ({\n  chatRoomKey\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    currentChatRoom\n  } = useSelector(state => state.chat);\n  const {\n    0: content,\n    1: setContent\n  } = useState(\"\");\n  const {\n    0: messagesRef,\n    1: setMessagesRef\n  } = useState(firebase.database().ref(\"messages\")); // const messagesRef = firebase.database().ref(\"messages\");\n\n  const createMessage = () => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        clientId: currentChatRoom.users.filter((v, i) => {\n          //console.log(v);\n          if (v.clientId === me._id) {\n            return v;\n          }\n        })[0].clientId,\n        name: me.nickname\n      },\n      content\n    }; //console.log(message.user.clientId);\n\n    return message;\n  };\n\n  const onChangeContent = useCallback(e => {\n    //console.log(e.target.value);\n    setContent(e.target.value);\n  }, []);\n  const onSubmit = useCallback(async () => {\n    if (content === \"\") {\n      alert(\"메시지를 입력해주세요.\");\n      return;\n    }\n\n    try {\n      // 여기서 작업하면 댐 상대방이 마이페이지 밖에 있는 것을 판단해야함\n      // user -> isInMypage : boolean\n      // 채팅방의 상대방이 마이페이지 바깥에 있다면 상대방 firebase의 lastknown업데이트 하면 댐\n      await messagesRef.child(currentChatRoom.id).push().set(createMessage());\n      setContent(\"\");\n      let opponentNickname = null;\n      await firebase.database().ref(`chatRooms`).child(currentChatRoom.id).once(\"value\", function (data) {\n        data.val().users.forEach((v, i) => {\n          if (v.nickname !== me.nickname) {\n            opponentNickname = v.nickname;\n          }\n        }); // console.log(data.val());\n      }); //console.log(\"상대방 닉네임은 \", opponentNickname);\n\n      let opponentUid = null;\n      await firebase.database().ref(`users`).orderByChild(\"nickname\").equalTo(opponentNickname).once(\"value\", function (data) {\n        //console.log(\"상대방의 정보는\", data.val());\n        opponentUid = Object.keys(data.val())[0];\n      }); //console.log(\"상대방 uid는\", opponentUid);\n\n      let opponentInfo = null;\n      await firebase.database().ref(\"users\").child(opponentUid).once(\"value\", function (data) {\n        opponentInfo = data.val();\n      }); //console.log(\"상대방 정보는 \", opponentInfo);\n\n      let isExistOpponentLeave = null;\n      await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).once(\"value\", function (data) {\n        // console.log(data.val());\n        if (data.val()[opponentNickname]) {\n          isExistOpponentLeave = data.val()[opponentNickname];\n        }\n      }); //console.log(\"상대방 나간 흔적이 있니?\", isExistOpponentLeave);\n      // 상대방이 마이페이지에 없을 때\n\n      if (!opponentInfo.isInMypage) {\n        // 상대방이 읽지않은채로 마이페이지 벗어난 경우\n        if (isExistOpponentLeave) {\n          await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).child(opponentNickname).update(_objectSpread(_objectSpread({}, isExistOpponentLeave), {}, {\n            count: isExistOpponentLeave.count + 1,\n            total: isExistOpponentLeave.total + 1,\n            lastKnownTotal: isExistOpponentLeave.lastKnownTotal\n          }));\n        } else {\n          // 상대방이 모두 읽은채로 마이페이지 벗어난 경우 = 초기상태 정의\n          await firebase.database().ref(\"chatRooms\").child(currentChatRoom.id).child(opponentNickname).update({\n            chatRoomId: currentChatRoom.id,\n            user: opponentNickname,\n            total: 1,\n            lastKnownTotal: 0,\n            count: 1\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      alert(\"오류 발생\");\n      setContent(\"\");\n    }\n  }, [content, messagesRef, chatRoomKey]);\n\n  const handleEnterPress = e => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  useEffect(() => {\n    return () => messagesRef.off();\n  }, []);\n  return /*#__PURE__*/_jsxs(ChatFormWrapper, {\n    children: [/*#__PURE__*/_jsx(InputWrapper, {\n      children: /*#__PURE__*/_jsx(Input, {\n        className: \"chat-input\",\n        onChange: onChangeContent,\n        value: content,\n        onKeyPress: handleEnterPress\n      })\n    }), /*#__PURE__*/_jsx(ButtonWrapper, {\n      children: /*#__PURE__*/_jsx(Button, {\n        className: \"submit-btn\",\n        style: {\n          width: \"100%\"\n        },\n        onClick: onSubmit,\n        children: \"\\uC804\\uC1A1\"\n      })\n    })]\n  });\n};\n\nexport default ChatForm;","map":null,"metadata":{},"sourceType":"module"}