{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Rate, Button, Tag } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport firebase from \"../../firebase\";\nimport Router, { withRouter } from \"next/router\";\nimport { setCurrentChatRoomAction } from \"../../reducers/chat\";\nimport Link from \"next/link\";\nconst ProfileWrapper = styled.div.withConfig({\n  displayName: \"ProfileModal__ProfileWrapper\",\n  componentId: \"pdlbcs-0\"\n})([\"margin:0;border:1px solid #ddd;padding:5px;.btn-wrapper{padding:5px;text-align:center;}\"]);\nconst RowWrapper = styled.div.withConfig({\n  displayName: \"ProfileModal__RowWrapper\",\n  componentId: \"pdlbcs-1\"\n})([\"padding:5px;.tag-partial{width:55px;text-align:center;}\"]);\n\nconst ProfileModal = ({\n  writer\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch(); // console.log(me.id);\n  // console.log(writer.id);\n\n  const {\n    0: chatRoomsRef,\n    1: setChatRoomsRef\n  } = useState(firebase.database().ref(\"chatRooms\"));\n  const {\n    0: chatRooms,\n    1: setChatRooms\n  } = useState([]);\n\n  const addChatRoomListener = () => {\n    let chatRoomsArray = [];\n    chatRoomsRef.on(\"child_added\", DataSnapShot => {\n      chatRoomsArray.push(DataSnapShot.val()); // charRooms\n      //console.log(chatRoomsArray);\n\n      setChatRooms(chatRoomsArray);\n    });\n  };\n\n  const onCreateChatRoom = useCallback(async () => {\n    let user = firebase.auth().currentUser;\n\n    if (user) {\n      const key = chatRoomsRef.push().key;\n      const newChatRoom = {\n        id: key,\n        users: [{\n          clientId: me._id,\n          nickname: me.nickname\n        }, {\n          clientId: writer._id,\n          nickname: writer.nickname\n        }]\n      }; //console.log(chatRooms);\n\n      let chatRoomExist = false; //console.log(chatRooms);\n\n      if (chatRooms.length !== 0) {\n        chatRooms.forEach((v, i) => {\n          let cnt = 0;\n          v.users.forEach((s, j) => {\n            //console.log(s.clientId);\n            if (s.clientId === newChatRoom.users[0].clientId || s.clientId === newChatRoom.users[1].clientId) {\n              cnt++;\n            }\n          });\n\n          if (cnt === 2) {\n            chatRoomExist = true;\n          }\n        });\n      } // let cnt = 0;\n      //console.log(\"cnt\", cnt);\n      // if (chatRooms.length === 0) {\n      //   alert(\"로딩중.. 잠시만 기다려주세요.\");\n      //   return;\n      // }\n\n\n      if (chatRoomExist) {\n        // 이미 채팅방이 있다면\n        // alert(\"이미 채팅방이 있ㅅ브니다\");\n        //dispatch(setCurrentChatRoomAction(newChatRoom));\n        Router.push(`/mypage`);\n      } else {\n        // 없다면 새로 생성\n        try {\n          await chatRoomsRef.child(key).update(newChatRoom); //dispatch(setCurrentChatRoomAction(newChatRoom));\n\n          alert(\"채팅방 생성완료\");\n          Router.push(`/mypage`); //setChatRoomsRef(null);\n        } catch (error) {\n          alert(\"오류발생! 다시 시도해주세요.\");\n        }\n      }\n\n      chatRoomExist = false;\n    }\n  }, [chatRoomsRef, chatRooms]);\n  useEffect(() => {\n    addChatRoomListener();\n    return () => {\n      chatRoomsRef.off();\n    };\n  }, []); // useEffect(() => {\n  //   console.log(chatRooms);\n  // }, [chatRooms]);\n\n  return /*#__PURE__*/_jsxs(ProfileWrapper, {\n    children: [/*#__PURE__*/_jsxs(RowWrapper, {\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        children: /*#__PURE__*/_jsx(Tag, {\n          className: \"tag-partial\",\n          color: \"#ccc\",\n          children: \"\\uAD00\\uC2EC\\uAE30\\uC220\"\n        })\n      }), writer.techStack.map((v, i) => {\n        if (i < 3) {\n          return /*#__PURE__*/_jsx(Tag, {\n            color: \"blue\",\n            children: v\n          }, v);\n        }\n      })]\n    }), /*#__PURE__*/_jsxs(RowWrapper, {\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        children: /*#__PURE__*/_jsx(Tag, {\n          className: \"tag-partial\",\n          color: \"#ccc\",\n          children: \"\\uAC00\\uC785\\uC77C\"\n        })\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: `${new Date(writer.createdAt).getFullYear()}.${new Date(writer.createdAt).getMonth() + 1}.${new Date(writer.createdAt).getDate()}`\n      })]\n    }), /*#__PURE__*/_jsxs(RowWrapper, {\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        children: /*#__PURE__*/_jsx(Tag, {\n          className: \"tag-partial\",\n          color: \"#ccc\",\n          children: \"Github\"\n        })\n      }), me && me.secretGithub ? /*#__PURE__*/_jsx(\"span\", {\n        style: {\n          color: \"#999\"\n        },\n        children: \"\\uBE44\\uACF5\\uAC1C\"\n      }) : /*#__PURE__*/_jsx(\"span\", {\n        children: writer.githubUrl\n      })]\n    }), /*#__PURE__*/_jsx(RowWrapper, {\n      className: \"btn-wrapper\",\n      children: me && me._id !== writer._id &&\n      /*#__PURE__*/\n      // <Link href=\"/mypage\">\n      //   <a onClick={onCreateChatRoom}></a>\n      // </Link>\n      _jsx(Button, {\n        type: \"primary\",\n        className: \"note-btn\",\n        onClick: onCreateChatRoom,\n        style: {\n          marginTop: \"20px\"\n        },\n        children: \"\\uBA54\\uC2DC\\uC9C0 \\uBCF4\\uB0B4\\uAE30\"\n      })\n    })]\n  });\n};\n\nexport default withRouter(ProfileModal);","map":null,"metadata":{},"sourceType":"module"}