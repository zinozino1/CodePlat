{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport SkillFilterForm from \"./SkillFilterForm\";\nimport { Select, Input, Upload, Button, Tag, Tooltip, Form } from \"antd\";\nimport { UploadOutlined, SlidersFilled, DeleteOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Locations, SERVER_URL } from \"../../../lib/constant/constant\";\nimport useInput from \"../../../hooks/useInput\";\nimport TagBox from \"./TagBox\";\nimport { writePostRequestAction } from \"../../../reducers/post\";\nimport Router, { withRouter } from \"next/router\";\nimport axios from \"axios\";\nimport { editPost } from \"../../../lib/api/post\";\nimport Editor from \"./Editor\";\nimport FormData from \"form-data\"; // import ImgCrop from \"antd-img-crop\";\n\nconst WriteFormWrapper = styled.div.withConfig({\n  displayName: \"WriteForm__WriteFormWrapper\",\n  componentId: \"nyap5p-0\"\n})([\"margin:40px 0;background:#fff;padding:40px;.file-btn{&:hover{color:#111;border:1px solid #313355;}}\"]);\nconst TitleWrapper = styled.h3.withConfig({\n  displayName: \"WriteForm__TitleWrapper\",\n  componentId: \"nyap5p-1\"\n})([\"margin-bottom:30px;\"]);\nconst FormItemWrapper = styled.div.withConfig({\n  displayName: \"WriteForm__FormItemWrapper\",\n  componentId: \"nyap5p-2\"\n})([\"margin-bottom:30px;\"]);\nconst Label = styled.span.withConfig({\n  displayName: \"WriteForm__Label\",\n  componentId: \"nyap5p-3\"\n})([\"font-weight:500;\"]);\nconst EditFileList = styled.div.withConfig({\n  displayName: \"WriteForm__EditFileList\",\n  componentId: \"nyap5p-4\"\n})([\"margin:8px 0;border:1px solid #ccc;padding:8px;\"]); // const files = new FormData();\n\nconst LocationSelectChildren = [];\nconst PeopleSelectChildren = [];\nconst ForumSelectChildren = [/*#__PURE__*/_jsx(Select.Option, {\n  children: \"\\uC790\\uC720\"\n}, \"자유\"), /*#__PURE__*/_jsx(Select.Option, {\n  children: \"QnA\"\n}, \"QnA\")];\nLocations.forEach((v, i) => {\n  LocationSelectChildren.push( /*#__PURE__*/_jsx(Select.Option, {\n    children: v.value\n  }, v.key));\n});\n\nfor (let i = 0; i < 10; i++) {\n  PeopleSelectChildren.push( /*#__PURE__*/_jsx(Select.Option, {\n    children: i + 1\n  }, i + 1));\n}\n\nconst WriteForm = ({\n  contentType,\n  router,\n  isEdit\n}) => {\n  const dispatch = useDispatch();\n  const {\n    post\n  } = useSelector(state => state.post);\n  const {\n    skill\n  } = useSelector(state => state.skill);\n  const {\n    me\n  } = useSelector(state => state.user); // 공통 state\n\n  const [title, setTitle] = isEdit ? useState(post.title) : useState(\"\");\n  const onChangeTitle = useCallback(e => {\n    setTitle(e.target.value);\n  }, []);\n  const [description, setDescription] = isEdit ? useState(post.content) : useState(\"\");\n  const onChangeDescription = useCallback(e => {\n    // setDescription(e.replace(/(<([^>]+)>)/gi, \"\"));\n    setDescription(e);\n  }, []);\n  const [fileList, setFileList] = isEdit ? useState(post.fileUrl) : useState([]);\n  const [fileNames, setFileNames] = isEdit ? useState(post.fileName) : useState([]);\n\n  const mergeFiles = () => {\n    let mergedFiles = [];\n\n    for (let i = 0; i < fileList.length; i++) {\n      let newFile = {};\n      newFile.url = `${SERVER_URL}/${fileList[i]}`;\n      newFile.thumbUrl = `${SERVER_URL}/${fileList[i]}`;\n      newFile.name = fileNames[i];\n      newFile.uid = i;\n      newFile.status = \"done\";\n      mergedFiles.push(newFile);\n    } //console.log(mergedFiles);\n\n\n    return mergedFiles;\n  };\n\n  const {\n    0: mergedFiles,\n    1: setMergedFiles\n  } = useState(mergeFiles());\n  const onChangeFileList = useCallback(e => {\n    //console.log(e);\n    //setFileList(fileList.concat(e));\n    // console.log(file);\n    setMergedFiles(mergedFiles.concat(e));\n  }, [mergedFiles]);\n  const onRemoveFile = useCallback(e => {\n    setMergedFiles(mergedFiles.filter((v, i) => {\n      if (v.uid !== e.uid) {\n        return _objectSpread({}, v);\n      }\n    }));\n  }, [mergedFiles]); // const onPreview = async (file) => {\n  //   let src = file.url;\n  //   if (!src) {\n  //     src = await new Promise((resolve) => {\n  //       const reader = new FileReader();\n  //       reader.readAsDataURL(file.originFileObj);\n  //       reader.onload = () => resolve(reader.result);\n  //     });\n  //   }\n  //   const image = new Image();\n  //   image.src = src;\n  //   const imgWindow = window.open(src);\n  //   imgWindow.document.write(image.outerHTML);\n  // };\n  // const onSubmit\n  // const onChangeFile = useCallback((e) => {\n  //   console.log(e.fileList[0].originFileObj);\n  // }, []);\n  // const normFile = (e) => {\n  //   //console.log(e.fileList[0].originFileObj);\n  //   if (e.file.status === \"done\") {\n  //     files.append(\"file\", e.fileList[0].originFileObj);\n  //     // console.log(e.fileList[0].originFileObj);\n  //     // setImageFile(formData);\n  //     // console.log(\"done\");\n  //   } else if (e.file.status === \"removed\") {\n  //     files.delete(\"file\");\n  //     // console.log(\"removed\");\n  //   }\n  //   // let fileList = e.fileList;\n  //   // fileList = fileList.slice(-1);\n  //   // if (Array.isArray(e)) {\n  //   //   return e;\n  //   // }\n  //   // return e && fileList;\n  // };\n  // const [forumTitle, setForumTitle] = useState(\"\");\n  // const onChangeForumTitle = useCallback((e) => {\n  //   setForumTitle(e.target.value);\n  // }, []);\n  // const [forumDescription, setForumDescription] = useState(\"\");\n  // const onChangeForumDescription = useCallback((e) => {\n  //   setForumDescription(e);\n  // }, []);\n  // 스터디, 프로젝트 state\n\n  const [peopleNumber, setPeopleNumber] = isEdit ? useState(post.recruitment) : useState(1);\n  const [location, setLocation] = isEdit ? useState(post.location) : useState(\"전체\");\n  const onChangePeopleNumber = useCallback(value => {\n    setPeopleNumber(value);\n  }, []);\n  const onChangeLocation = useCallback(value => {\n    setLocation(value);\n  }, []);\n  const onStudyAndProjectSubmit = useCallback(() => {\n    if (!me) {\n      alert(\"로그인이 필요한 서비스입니다.\");\n      return;\n    }\n\n    if (skill.length === 0) {\n      alert(\"활용기술을 하나 이상 선택해주세요.\");\n      return;\n    }\n\n    if (title === \"\") {\n      alert(\"제목을 채워주세요.\");\n      return;\n    }\n\n    if (description === \"\") {\n      alert(\"내용을 채워주세요.\");\n      return;\n    }\n\n    if (description.length < 5) {\n      alert(\"내용을 5글자 이상 써주세요.\");\n      return;\n    }\n\n    let submitConfirm = confirm(\"게시물을 등록하시겠습니까?\");\n\n    if (submitConfirm) {\n      const formData = new FormData();\n      mergedFiles.forEach(file => formData.append(\"files\", file)); //console.log(fileList);\n      //formData.append()\n      // formData.append(\"\")\n      // 여기부터 작업하면 댐\n\n      formData.append(\"type\", contentType);\n      formData.append(\"writer\", me._id);\n      formData.append(\"title\", title);\n      formData.append(\"content\", description);\n      formData.append(\"techStack\", JSON.stringify(skill));\n      formData.append(\"recruitment\", peopleNumber);\n      formData.append(\"location\", location);\n      dispatch(writePostRequestAction(formData // type: router.route.split(\"/\")[2],\n      // writer: me._id,\n      // title,\n      // content: description,\n      // recruitment: peopleNumber,\n      // location,\n      // techStack: skill,\n      // field: router.route.split(\"/\")[2],\n      ));\n    } else {\n      return;\n    }\n  }, [skill, title, description, peopleNumber, location, me, router, mergedFiles]);\n  const onStudyAndProjectEdit = useCallback(() => {\n    if (!me) {\n      alert(\"로그인이 필요한 서비스입니다.\");\n      return;\n    }\n\n    if (skill.length === 0) {\n      alert(\"활용기술을 하나 이상 선택해주세요.\");\n      return;\n    }\n\n    if (title === \"\") {\n      alert(\"제목을 채워주세요.\");\n      return;\n    }\n\n    if (description === \"\") {\n      alert(\"내용을 채워주세요.\");\n      return;\n    }\n\n    if (description.length < 5) {\n      alert(\"내용을 5글자 이상 써주세요.\");\n      return;\n    }\n\n    let editConfirm = confirm(\"수정하시겠습니까?\");\n\n    if (editConfirm) {\n      const formData = new FormData();\n      let existFilePaths = [];\n      let existFileNames = [];\n      mergedFiles.forEach(file => {\n        if (file.size) {\n          formData.append(\"files\", file);\n        } else {\n          existFilePaths.push(file.url.replace(`${SERVER_URL}/`, \"\"));\n          existFileNames.push(file.name);\n        }\n      }); //console.log(fileList);\n      //formData.append()\n      // formData.append(\"\")\n      // 여기부터 작업하면 댐\n\n      formData.append(\"type\", contentType);\n      formData.append(\"id\", post._id);\n      formData.append(\"title\", title);\n      formData.append(\"content\", description);\n      formData.append(\"recruitment\", peopleNumber);\n      formData.append(\"location\", location);\n      formData.append(\"techStack\", JSON.stringify(skill));\n      formData.append(\"filePath\", JSON.stringify(existFilePaths));\n      formData.append(\"fileName\", JSON.stringify(existFileNames));\n      axios.patch(`api/posts`, formData).then(() => {\n        //alert(\"수정성공\");\n        Router.push(`http://localhost:3000/articles/${post.type}/${post._id}`);\n      }).catch(error => {\n        alert(\"수정실패\");\n      });\n    } else {\n      return;\n    } // await axios\n    //   .put(editPost, {\n    //     id: post._id,\n    //     title,\n    //     content: description,\n    //     recruitment: peopleNumber,\n    //     location,\n    //     techStack: skill,\n    //   })\n    //   .then((res) => {\n    //     console.log(\"수정성공\");\n    //     Router.push(`http://localhost:3000/articles/${post.type}/${post._id}`);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //     alert(\"수정실패\");\n    //   });\n\n  }, [skill, title, description, peopleNumber, location, post, mergedFiles]); // 포럼 state\n\n  const [filter, setFilter] = isEdit ? useState(post.field) : useState(\"자유\"); // tagbox 관련된 것들\n\n  const [tags, setTags] = isEdit ? useState(post.tag) : useState([]);\n  const {\n    0: inputVisible,\n    1: setInputVisible\n  } = useState(false);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState(\"\");\n  const {\n    0: editInputIndex,\n    1: setEditInputIndex\n  } = useState(-1);\n  const {\n    0: editInputValue,\n    1: setEditInputValue\n  } = useState(\"\");\n  const onChangeFilter = useCallback(value => {\n    setFilter(value);\n  }, []);\n  const onForumSubmit = useCallback(() => {\n    if (!me) {\n      alert(\"로그인이 필요한 서비스입니다.\");\n      return;\n    }\n\n    if (title === \"\") {\n      alert(\"제목을 채워주세요.\");\n      return;\n    }\n\n    if (description === \"\") {\n      alert(\"내용을 채워주세요.\");\n      return;\n    }\n\n    if (description.length < 5) {\n      alert(\"내용을 5글자 이상 써주세요.\");\n      return;\n    }\n\n    let submitConfirm = confirm(\"게시물을 등록하시겠습니까?\");\n\n    if (submitConfirm) {\n      const formData = new FormData();\n      mergedFiles.forEach(file => formData.append(\"files\", file)); //console.log(fileList);\n      //formData.append()\n      // formData.append(\"\")\n      // 여기부터 작업하면 댐\n\n      formData.append(\"type\", \"forum\");\n      formData.append(\"writer\", me._id);\n      formData.append(\"title\", title);\n      formData.append(\"content\", description);\n      formData.append(\"tag\", JSON.stringify(tags));\n      formData.append(\"field\", filter); //console.log({ title, description, tags, filter, fileList });\n\n      dispatch(writePostRequestAction(formData // type: router.route.split(\"/\")[2],\n      // writer: me._id,\n      // title,\n      // content: description,\n      // tag: tags,\n      // field: filter,\n      ));\n    } else {\n      return;\n    }\n  }, [title, description, tags, router, me, filter, mergedFiles]);\n  const onForumEdit = useCallback(() => {\n    if (!me) {\n      alert(\"로그인이 필요한 서비스입니다.\");\n      return;\n    }\n\n    if (title === \"\") {\n      alert(\"제목을 채워주세요.\");\n      return;\n    }\n\n    if (description === \"\") {\n      alert(\"내용을 채워주세요.\");\n      return;\n    }\n\n    if (description.length < 5) {\n      alert(\"내용을 5글자 이상 써주세요.\");\n      return;\n    }\n\n    console.log({\n      title,\n      description,\n      tags,\n      filter,\n      mergedFiles\n    });\n    let editConfirm = confirm(\"수정하시겠습니까?\");\n\n    if (editConfirm) {\n      const formData = new FormData();\n      let existFilePaths = [];\n      let existFileNames = [];\n      mergedFiles.forEach(file => {\n        if (file.size) {\n          // 새로운거\n          //console.log(\"새로운거\");\n          formData.append(\"files\", file);\n        } else {\n          // 기존에 있던거\n          existFilePaths.push(file.url.replace(`${SERVER_URL}/`, \"\"));\n          existFileNames.push(file.name);\n        }\n      }); // console.log(tmp);\n      // console.log(existFilePaths);\n      // console.log(existFileNames);\n      //formData.append()\n      // formData.append(\"\")\n      // 여기부터 작업하면 댐\n\n      formData.append(\"type\", \"forum\");\n      formData.append(\"id\", post._id);\n      formData.append(\"title\", title);\n      formData.append(\"content\", description);\n      formData.append(\"tag\", JSON.stringify(tags));\n      formData.append(\"field\", filter);\n      formData.append(\"filePath\", JSON.stringify(existFilePaths));\n      formData.append(\"fileName\", JSON.stringify(existFileNames));\n      axios.patch(`api/posts`, formData).then(() => {\n        //alert(\"수정성공\");\n        Router.push(`http://localhost:3000/articles/${post.type}/${post._id}`);\n      }).catch(error => {\n        alert(\"수정실패\");\n      });\n    } else {\n      return;\n    }\n  }, [title, description, tags, post, filter, mergedFiles]); // useEffect(() => {\n  //   console.log(title);\n  //   console.log(description);\n  // }, [title, description]);\n  // useEffect(() => {\n  //   console.log(mergedFiles);\n  // }, [mergedFiles]);\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: contentType == \"study\" || contentType == \"project\" ? /*#__PURE__*/_jsxs(WriteFormWrapper, {\n      children: [contentType === \"study\" ? /*#__PURE__*/_jsx(TitleWrapper, {\n        children: \"\\uC2A4\\uD130\\uB514 \\uBAA8\\uC9D1\"\n      }) : /*#__PURE__*/_jsx(TitleWrapper, {\n        children: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA8\\uC9D1\"\n      }), /*#__PURE__*/_jsxs(FormItemWrapper, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            marginBottom: \"7px\"\n          },\n          children: /*#__PURE__*/_jsx(Label, {\n            children: \"\\uD65C\\uC6A9\\uAE30\\uC220\"\n          })\n        }), /*#__PURE__*/_jsx(SkillFilterForm, {\n          type: \"write\",\n          isEdit: isEdit,\n          values: isEdit && post.techStack\n        })]\n      }), /*#__PURE__*/_jsxs(FormItemWrapper, {\n        style: {\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsx(Label, {\n          style: {\n            lineHeight: \"32px\"\n          },\n          children: \"\\uBAA8\\uC9D1\\uC778\\uC6D0\"\n        }), /*#__PURE__*/_jsx(Select, {\n          defaultValue: isEdit ? post.recruitment : \"1\",\n          bordered: false,\n          style: {\n            color: \"#999\"\n          },\n          onChange: onChangePeopleNumber,\n          children: PeopleSelectChildren\n        }), /*#__PURE__*/_jsx(Label, {\n          style: {\n            lineHeight: \"32px\"\n          },\n          children: \"\\uC9C0\\uC5ED\"\n        }), /*#__PURE__*/_jsx(Select, {\n          defaultValue: isEdit ? post.location : \"전체\",\n          bordered: false,\n          style: {\n            color: \"#999\"\n          },\n          onChange: onChangeLocation,\n          children: LocationSelectChildren\n        })]\n      }), /*#__PURE__*/_jsx(Editor, {\n        onChangeDescription: onChangeDescription,\n        onChangeTitle: onChangeTitle,\n        description: description,\n        title: title\n      }), /*#__PURE__*/_jsx(Upload, {\n        name: \"logo\" //listType=\"picture\"\n        ,\n        beforeUpload: onChangeFileList,\n        defaultFileList: mergeFiles(),\n        onRemove: onRemoveFile,\n        children: /*#__PURE__*/_jsx(Button, {\n          className: \"file-btn\",\n          icon: /*#__PURE__*/_jsx(UploadOutlined, {}),\n          children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          textAlign: \"center\",\n          margin: \"50px 0\"\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\",\n          style: {\n            width: \"100px\",\n            background: \"#313355\",\n            color: \"#fff\",\n            border: \"1px solid #313355\"\n          },\n          onClick: isEdit ? onStudyAndProjectEdit : onStudyAndProjectSubmit,\n          children: isEdit ? \"수정\" : \"등록\"\n        })\n      })]\n    }) : /*#__PURE__*/_jsxs(WriteFormWrapper, {\n      children: [/*#__PURE__*/_jsx(TitleWrapper, {\n        children: \"\\uAE00\\uC4F0\\uAE30\"\n      }), /*#__PURE__*/_jsxs(FormItemWrapper, {\n        children: [/*#__PURE__*/_jsx(Label, {\n          style: {\n            lineHeight: \"32px\"\n          },\n          children: \"\\uBD84\\uB958\"\n        }), /*#__PURE__*/_jsx(Select, {\n          defaultValue: isEdit ? post.field : filter,\n          bordered: false,\n          style: {\n            color: \"#999\"\n          },\n          onChange: onChangeFilter // value={isEdit?:}\n          ,\n          children: ForumSelectChildren\n        })]\n      }), /*#__PURE__*/_jsxs(FormItemWrapper, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            marginBottom: \"7px\"\n          },\n          children: /*#__PURE__*/_jsx(Label, {\n            children: \"\\uD0DC\\uADF8\"\n          })\n        }), /*#__PURE__*/_jsx(TagBox, {\n          tags: tags,\n          setTags: setTags,\n          inputVisible: inputVisible,\n          setInputVisible: setInputVisible,\n          inputValue: inputValue,\n          setInputValue: setInputValue,\n          editInputIndex: editInputIndex,\n          setEditInputIndex: setEditInputIndex,\n          editInputValue: editInputValue,\n          setEditInputValue: setEditInputValue\n        })]\n      }), /*#__PURE__*/_jsx(Editor, {\n        onChangeDescription: onChangeDescription,\n        onChangeTitle: onChangeTitle,\n        description: description,\n        title: title\n      }), /*#__PURE__*/_jsx(Upload, {\n        name: \"logo\" //listType=\"picture\"\n        ,\n        beforeUpload: onChangeFileList,\n        defaultFileList: mergeFiles(),\n        onRemove: onRemoveFile,\n        children: /*#__PURE__*/_jsx(Button, {\n          className: \"file-btn\",\n          icon: /*#__PURE__*/_jsx(UploadOutlined, {}),\n          children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          textAlign: \"center\",\n          margin: \"50px 0\"\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\",\n          style: {\n            width: \"100px\",\n            background: \"#313355\",\n            color: \"#fff\",\n            border: \"1px solid #313355\"\n          },\n          onClick: isEdit ? onForumEdit : onForumSubmit,\n          children: isEdit ? \"수정\" : \"등록\"\n        })\n      })]\n    })\n  });\n};\n\nexport default withRouter(WriteForm);","map":null,"metadata":{},"sourceType":"module"}